{"ast":null,"code":"import _toConsumableArray from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{ResponsiveBubble}from'@nivo/circle-packing';import{interpolateMagma}from'd3-scale-chromatic';import{getDataFromRegion,generateTreeData}from'../utils/utils';import*as str from'../utils/strings';var BubblePlot=/*#__PURE__*/function(_Component){_inherits(BubblePlot,_Component);var _super=_createSuper(BubblePlot);function BubblePlot(){var _this;_classCallCheck(this,BubblePlot);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={plotData:null,currentNodePath:null};_this.handleNodeClick=function(node){var region=node.path===str.GLOBAL_ZH?[node.path]:node.path.split('.').reverse().slice(1);_this.props.regionToggle(region);};return _this;}_createClass(BubblePlot,[{key:\"render\",value:function render(){var _this$props=this.props,data=_this$props.data,metric=_this$props.metric,currentRegion=_this$props.currentRegion,date=_this$props.date,playing=_this$props.playing,lang=_this$props.lang,darkMode=_this$props.darkMode;if(data==null)return/*#__PURE__*/React.createElement(\"div\",null);var plotData={name:str.GLOBAL_ZH,displayName:lang==='en'?str.GLOBAL_EN:str.GLOBAL_ZH,confirmedCount:data[str.GLOBAL_ZH].confirmedCount[date],deadCount:data[str.GLOBAL_ZH].deadCount[date],curedCount:data[str.GLOBAL_ZH].curedCount[date],children:generateTreeData(data,date,lang)};var currentNodePath=currentRegion[0]===str.GLOBAL_ZH?str.GLOBAL_ZH:[str.GLOBAL_ZH].concat(_toConsumableArray(currentRegion)).reverse().join('.');// TODO: Node does not exist when count is 0. Need to find the parent node that has non-zero count.\nvar currentData=getDataFromRegion(data,currentRegion);var count=currentData[metric][date];if(count==null||count===0||currentRegion[0]===str.US_ZH&&currentRegion.length===3||currentRegion[0]===str.UK_ZH&&currentRegion.length>3)currentNodePath=[str.GLOBAL_ZH].concat(_toConsumableArray(currentRegion.slice(0,currentRegion.length-1))).reverse().join('.');var displayNodePath=Object.keys(currentData).length>4?currentNodePath:currentRegion[0]===str.GLOBAL_ZH?str.GLOBAL_ZH:[str.GLOBAL_ZH].concat(_toConsumableArray(currentRegion.slice(0,currentRegion.length-1))).reverse().join('.');if(currentRegion[0]===str.US_ZH&&currentRegion.length>1)displayNodePath=[str.GLOBAL_ZH,str.US_ZH].reverse().join('.');if(currentRegion[0]===str.UK_ZH&&currentRegion.length>2)displayNodePath=[str.GLOBAL_ZH].concat(_toConsumableArray(currentRegion.slice(0,2))).reverse().join('.');return/*#__PURE__*/React.createElement(\"div\",{className:\"bubble-plot-wrap\"},/*#__PURE__*/React.createElement(ResponsiveBubble,{ref:this.bubble,root:plotData,theme:{fontFamily:'Saira, sans-serif',tooltip:{container:{background:darkMode?'var(--darkest-grey)':'white'}}},margin:{top:20,right:20,bottom:20,left:20},tooltip:function tooltip(_ref){var color=_ref.color,value=_ref.value,data=_ref.data;return/*#__PURE__*/React.createElement(\"span\",{className:\"plot-tooltip\",style:{color:color==='#fff'&&!darkMode?'#222':color}},data.displayName,/*#__PURE__*/React.createElement(\"span\",{className:\"plot-tooltip-bold\"},\" \".concat(data[metric])));},identity:\"name\",value:metric,colors:[].concat(_toConsumableArray([0.3,0.4,0.2,0.1].map(function(x){return interpolateMagma(1-x);})),['#fff']),padding:3,enableLabel:true,label:function label(_ref2){var data=_ref2.data;return data.displayName;},labelTextColor:'#222',labelSkipRadius:8,animate:!playing,motionStiffness:50,motionDamping:12,onClick:this.handleNodeClick,defs:[{id:'bubbleLines',type:'patternLines',background:'none',color:'inherit',rotation:-45,lineWidth:4,spacing:5}],fill:[{match:function match(d){return d.path===currentNodePath;},id:'bubbleLines'}],currentNodePath:displayNodePath}));}}]);return BubblePlot;}(Component);export{BubblePlot as default};","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/components/BubblePlot.js"],"names":["React","Component","ResponsiveBubble","interpolateMagma","getDataFromRegion","generateTreeData","str","BubblePlot","state","plotData","currentNodePath","handleNodeClick","node","region","path","GLOBAL_ZH","split","reverse","slice","props","regionToggle","data","metric","currentRegion","date","playing","lang","darkMode","name","displayName","GLOBAL_EN","confirmedCount","deadCount","curedCount","children","join","currentData","count","US_ZH","length","UK_ZH","displayNodePath","Object","keys","bubble","fontFamily","tooltip","container","background","top","right","bottom","left","color","value","map","x","id","type","rotation","lineWidth","spacing","match","d"],"mappings":"szBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,gBAAT,KAAiC,sBAAjC,CACA,OAASC,gBAAT,KAAiC,oBAAjC,CACA,OAASC,iBAAT,CAA4BC,gBAA5B,KAAoD,gBAApD,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,kBAArB,C,GAEqBC,CAAAA,U,2UACjBC,K,CAAQ,CACJC,QAAQ,CAAE,IADN,CAEJC,eAAe,CAAE,IAFb,C,OAMRC,e,CAAkB,SAACC,IAAD,CAAU,CACxB,GAAMC,CAAAA,MAAM,CAAGD,IAAI,CAACE,IAAL,GAAcR,GAAG,CAACS,SAAlB,CAA8B,CAAEH,IAAI,CAACE,IAAP,CAA9B,CAA8CF,IAAI,CAACE,IAAL,CAAUE,KAAV,CAAgB,GAAhB,EAAqBC,OAArB,GAA+BC,KAA/B,CAAqC,CAArC,CAA7D,CACA,MAAKC,KAAL,CAAWC,YAAX,CAAwBP,MAAxB,EACH,C,6EAEQ,iBACkE,KAAKM,KADvE,CACGE,IADH,aACGA,IADH,CACSC,MADT,aACSA,MADT,CACiBC,aADjB,aACiBA,aADjB,CACgCC,IADhC,aACgCA,IADhC,CACsCC,OADtC,aACsCA,OADtC,CAC+CC,IAD/C,aAC+CA,IAD/C,CACqDC,QADrD,aACqDA,QADrD,CAEL,GAAIN,IAAI,EAAI,IAAZ,CAAkB,mBAAO,+BAAP,CAClB,GAAIZ,CAAAA,QAAQ,CAAG,CACXmB,IAAI,CAAEtB,GAAG,CAACS,SADC,CAEXc,WAAW,CAAEH,IAAI,GAAK,IAAT,CAAgBpB,GAAG,CAACwB,SAApB,CAAgCxB,GAAG,CAACS,SAFtC,CAGXgB,cAAc,CAAEV,IAAI,CAACf,GAAG,CAACS,SAAL,CAAJ,CAAoBgB,cAApB,CAAmCP,IAAnC,CAHL,CAIXQ,SAAS,CAAEX,IAAI,CAACf,GAAG,CAACS,SAAL,CAAJ,CAAoBiB,SAApB,CAA8BR,IAA9B,CAJA,CAKXS,UAAU,CAAEZ,IAAI,CAACf,GAAG,CAACS,SAAL,CAAJ,CAAoBkB,UAApB,CAA+BT,IAA/B,CALD,CAMXU,QAAQ,CAAE7B,gBAAgB,CAACgB,IAAD,CAAOG,IAAP,CAAaE,IAAb,CANf,CAAf,CASA,GAAIhB,CAAAA,eAAe,CACfa,aAAa,CAAC,CAAD,CAAb,GAAqBjB,GAAG,CAACS,SAAzB,CAAqCT,GAAG,CAACS,SAAzC,CAAqD,CAAET,GAAG,CAACS,SAAN,4BAAoBQ,aAApB,GAAoCN,OAApC,GAA8CkB,IAA9C,CAAmD,GAAnD,CADzD,CAGA;AACA,GAAMC,CAAAA,WAAW,CAAGhC,iBAAiB,CAACiB,IAAD,CAAOE,aAAP,CAArC,CACA,GAAMc,CAAAA,KAAK,CAAGD,WAAW,CAACd,MAAD,CAAX,CAAoBE,IAApB,CAAd,CACA,GACIa,KAAK,EAAI,IAAT,EACAA,KAAK,GAAK,CADV,EAECd,aAAa,CAAC,CAAD,CAAb,GAAqBjB,GAAG,CAACgC,KAAzB,EAAkCf,aAAa,CAACgB,MAAd,GAAyB,CAF5D,EAGChB,aAAa,CAAC,CAAD,CAAb,GAAqBjB,GAAG,CAACkC,KAAzB,EAAkCjB,aAAa,CAACgB,MAAd,CAAuB,CAJ9D,CAMI7B,eAAe,CAAG,CAAEJ,GAAG,CAACS,SAAN,4BAAoBQ,aAAa,CAACL,KAAd,CAAoB,CAApB,CAAuBK,aAAa,CAACgB,MAAd,CAAuB,CAA9C,CAApB,GAAuEtB,OAAvE,GAAiFkB,IAAjF,CAAsF,GAAtF,CAAlB,CAEJ,GAAIM,CAAAA,eAAe,CACfC,MAAM,CAACC,IAAP,CAAYP,WAAZ,EAAyBG,MAAzB,CAAkC,CAAlC,CACM7B,eADN,CAEMa,aAAa,CAAC,CAAD,CAAb,GAAqBjB,GAAG,CAACS,SAAzB,CACET,GAAG,CAACS,SADN,CAEE,CAAET,GAAG,CAACS,SAAN,4BAAoBQ,aAAa,CAACL,KAAd,CAAoB,CAApB,CAAuBK,aAAa,CAACgB,MAAd,CAAuB,CAA9C,CAApB,GAAuEtB,OAAvE,GAAiFkB,IAAjF,CAAsF,GAAtF,CALZ,CAOA,GAAIZ,aAAa,CAAC,CAAD,CAAb,GAAqBjB,GAAG,CAACgC,KAAzB,EAAkCf,aAAa,CAACgB,MAAd,CAAuB,CAA7D,CACIE,eAAe,CAAG,CAAEnC,GAAG,CAACS,SAAN,CAAiBT,GAAG,CAACgC,KAArB,EAA6BrB,OAA7B,GAAuCkB,IAAvC,CAA4C,GAA5C,CAAlB,CAEJ,GAAIZ,aAAa,CAAC,CAAD,CAAb,GAAqBjB,GAAG,CAACkC,KAAzB,EAAkCjB,aAAa,CAACgB,MAAd,CAAuB,CAA7D,CACIE,eAAe,CAAG,CAAEnC,GAAG,CAACS,SAAN,4BAAoBQ,aAAa,CAACL,KAAd,CAAoB,CAApB,CAAuB,CAAvB,CAApB,GAAgDD,OAAhD,GAA0DkB,IAA1D,CAA+D,GAA/D,CAAlB,CAEJ,mBACI,2BAAK,SAAS,CAAC,kBAAf,eACI,oBAAC,gBAAD,EACI,GAAG,CAAE,KAAKS,MADd,CAEI,IAAI,CAAEnC,QAFV,CAGI,KAAK,CAAE,CACHoC,UAAU,CAAE,mBADT,CAEHC,OAAO,CAAE,CACLC,SAAS,CAAE,CACPC,UAAU,CAAErB,QAAQ,CAAG,qBAAH,CAA2B,OADxC,CADN,CAFN,CAHX,CAWI,MAAM,CAAE,CAAEsB,GAAG,CAAE,EAAP,CAAWC,KAAK,CAAE,EAAlB,CAAsBC,MAAM,CAAE,EAA9B,CAAkCC,IAAI,CAAE,EAAxC,CAXZ,CAYI,OAAO,CAAE,0BAAGC,CAAAA,KAAH,MAAGA,KAAH,CAAUC,KAAV,MAAUA,KAAV,CAAiBjC,IAAjB,MAAiBA,IAAjB,oBACL,4BACI,SAAS,CAAC,cADd,CAEI,KAAK,CAAE,CAAEgC,KAAK,CAAEA,KAAK,GAAK,MAAV,EAAoB,CAAC1B,QAArB,CAAgC,MAAhC,CAAyC0B,KAAlD,CAFX,EAIKhC,IAAI,CAACQ,WAJV,cAKI,4BAAM,SAAS,CAAC,mBAAhB,aAAyCR,IAAI,CAACC,MAAD,CAA7C,EALJ,CADK,EAZb,CAqBI,QAAQ,CAAC,MArBb,CAsBI,KAAK,CAAEA,MAtBX,CAuBI,MAAM,8BAAO,CAAE,GAAF,CAAO,GAAP,CAAY,GAAZ,CAAiB,GAAjB,EAAuBiC,GAAvB,CAA2B,SAACC,CAAD,QAAOrD,CAAAA,gBAAgB,CAAC,EAAIqD,CAAL,CAAvB,EAA3B,CAAP,GAAmE,MAAnE,EAvBV,CAwBI,OAAO,CAAE,CAxBb,CAyBI,WAAW,CAAE,IAzBjB,CA0BI,KAAK,CAAE,yBAAGnC,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAI,CAACQ,WAAnB,EA1BX,CA2BI,cAAc,CAAE,MA3BpB,CA4BI,eAAe,CAAE,CA5BrB,CA6BI,OAAO,CAAE,CAACJ,OA7Bd,CA8BI,eAAe,CAAE,EA9BrB,CA+BI,aAAa,CAAE,EA/BnB,CAgCI,OAAO,CAAE,KAAKd,eAhClB,CAiCI,IAAI,CAAE,CACF,CACI8C,EAAE,CAAE,aADR,CAEIC,IAAI,CAAE,cAFV,CAGIV,UAAU,CAAE,MAHhB,CAIIK,KAAK,CAAE,SAJX,CAKIM,QAAQ,CAAE,CAAC,EALf,CAMIC,SAAS,CAAE,CANf,CAOIC,OAAO,CAAE,CAPb,CADE,CAjCV,CA4CI,IAAI,CAAE,CACF,CACIC,KAAK,CAAE,eAACC,CAAD,QAAOA,CAAAA,CAAC,CAACjD,IAAF,GAAWJ,eAAlB,EADX,CAEI+C,EAAE,CAAE,aAFR,CADE,CA5CV,CAkDI,eAAe,CAAEhB,eAlDrB,EADJ,CADJ,CAwDH,C,wBA3GmCxC,S,SAAnBM,U","sourcesContent":["import React, { Component } from 'react'\r\nimport { ResponsiveBubble } from '@nivo/circle-packing'\r\nimport { interpolateMagma } from 'd3-scale-chromatic'\r\nimport { getDataFromRegion, generateTreeData } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\n\r\nexport default class BubblePlot extends Component {\r\n    state = {\r\n        plotData: null,\r\n        currentNodePath: null\r\n    }\r\n\r\n    // hack so that bubble plot can interact with other plots\r\n    handleNodeClick = (node) => {\r\n        const region = node.path === str.GLOBAL_ZH ? [ node.path ] : node.path.split('.').reverse().slice(1)\r\n        this.props.regionToggle(region)\r\n    }\r\n\r\n    render() {\r\n        const { data, metric, currentRegion, date, playing, lang, darkMode } = this.props\r\n        if (data == null) return <div />\r\n        let plotData = {\r\n            name: str.GLOBAL_ZH,\r\n            displayName: lang === 'en' ? str.GLOBAL_EN : str.GLOBAL_ZH,\r\n            confirmedCount: data[str.GLOBAL_ZH].confirmedCount[date],\r\n            deadCount: data[str.GLOBAL_ZH].deadCount[date],\r\n            curedCount: data[str.GLOBAL_ZH].curedCount[date],\r\n            children: generateTreeData(data, date, lang)\r\n        }\r\n\r\n        let currentNodePath =\r\n            currentRegion[0] === str.GLOBAL_ZH ? str.GLOBAL_ZH : [ str.GLOBAL_ZH, ...currentRegion ].reverse().join('.')\r\n\r\n        // TODO: Node does not exist when count is 0. Need to find the parent node that has non-zero count.\r\n        const currentData = getDataFromRegion(data, currentRegion)\r\n        const count = currentData[metric][date]\r\n        if (\r\n            count == null ||\r\n            count === 0 ||\r\n            (currentRegion[0] === str.US_ZH && currentRegion.length === 3) ||\r\n            (currentRegion[0] === str.UK_ZH && currentRegion.length > 3)\r\n        )\r\n            currentNodePath = [ str.GLOBAL_ZH, ...currentRegion.slice(0, currentRegion.length - 1) ].reverse().join('.')\r\n\r\n        let displayNodePath =\r\n            Object.keys(currentData).length > 4\r\n                ? currentNodePath\r\n                : currentRegion[0] === str.GLOBAL_ZH\r\n                  ? str.GLOBAL_ZH\r\n                  : [ str.GLOBAL_ZH, ...currentRegion.slice(0, currentRegion.length - 1) ].reverse().join('.')\r\n\r\n        if (currentRegion[0] === str.US_ZH && currentRegion.length > 1)\r\n            displayNodePath = [ str.GLOBAL_ZH, str.US_ZH ].reverse().join('.')\r\n\r\n        if (currentRegion[0] === str.UK_ZH && currentRegion.length > 2)\r\n            displayNodePath = [ str.GLOBAL_ZH, ...currentRegion.slice(0, 2) ].reverse().join('.')\r\n\r\n        return (\r\n            <div className=\"bubble-plot-wrap\">\r\n                <ResponsiveBubble\r\n                    ref={this.bubble}\r\n                    root={plotData}\r\n                    theme={{\r\n                        fontFamily: 'Saira, sans-serif',\r\n                        tooltip: {\r\n                            container: {\r\n                                background: darkMode ? 'var(--darkest-grey)' : 'white'\r\n                            }\r\n                        }\r\n                    }}\r\n                    margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\r\n                    tooltip={({ color, value, data }) => (\r\n                        <span\r\n                            className=\"plot-tooltip\"\r\n                            style={{ color: color === '#fff' && !darkMode ? '#222' : color }}\r\n                        >\r\n                            {data.displayName}\r\n                            <span className=\"plot-tooltip-bold\">{` ${data[metric]}`}</span>\r\n                        </span>\r\n                    )}\r\n                    identity=\"name\"\r\n                    value={metric}\r\n                    colors={[ ...[ 0.3, 0.4, 0.2, 0.1 ].map((x) => interpolateMagma(1 - x)), '#fff' ]}\r\n                    padding={3}\r\n                    enableLabel={true}\r\n                    label={({ data }) => data.displayName}\r\n                    labelTextColor={'#222'}\r\n                    labelSkipRadius={8}\r\n                    animate={!playing}\r\n                    motionStiffness={50}\r\n                    motionDamping={12}\r\n                    onClick={this.handleNodeClick}\r\n                    defs={[\r\n                        {\r\n                            id: 'bubbleLines',\r\n                            type: 'patternLines',\r\n                            background: 'none',\r\n                            color: 'inherit',\r\n                            rotation: -45,\r\n                            lineWidth: 4,\r\n                            spacing: 5\r\n                        }\r\n                    ]}\r\n                    fill={[\r\n                        {\r\n                            match: (d) => d.path === currentNodePath,\r\n                            id: 'bubbleLines'\r\n                        }\r\n                    ]}\r\n                    currentNodePath={displayNodePath}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}