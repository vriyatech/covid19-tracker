{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\src\\\\components\\\\StreamPlot.js\";\nimport React, { Component } from 'react';\nimport { ResponsiveStream } from '@nivo/stream';\nexport default class StreamPlot extends Component {\n  render() {\n    const {\n      darkMode,\n      plotParameters,\n      plotDataAll,\n      plotTheme,\n      offsetType,\n      fullPlot\n    } = this.props;\n    if (plotParameters.type !== 'stream') return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 54\n      }\n    });\n\n    let colors = d => darkMode ? [0, 1, 2, 3, 4, 5].map(x => `var(--primary-color-${x})`)[plotDataAll.plotKeys.length - 1 - d.index] : [8, 6, 5, 4, 3, 2].map(x => `var(--primary-color-${x})`)[plotDataAll.plotKeys.length - 1 - d.index];\n\n    if (fullPlot) {\n      colors = d => darkMode ? [...Array(10).keys()].map(x => `var(--primary-color-${x})`)[plotDataAll.plotKeys.length - 1 - d.index] : [...Array(10).keys()].reverse().map(x => `var(--primary-color-${x})`)[plotDataAll.plotKeys.length - 1 - d.index];\n    }\n\n    return /*#__PURE__*/React.createElement(ResponsiveStream, {\n      data: plotDataAll.plotData,\n      keys: plotDataAll.plotKeys,\n      theme: plotTheme,\n      curve: \"monotoneX\",\n      margin: {\n        top: 20,\n        right: 115,\n        bottom: 35,\n        left: 40\n      },\n      axisTop: null,\n      axisRight: null,\n      axisBottom: {\n        orient: 'bottom',\n        tickSize: 0,\n        tickPadding: 5,\n        tickRotation: !fullPlot ? 0 : -30,\n        format: idx => {\n          const n = !fullPlot ? 5 : 10;\n          return plotParameters.xAxisFormat(idx, Math.round(plotDataAll.plotData.length / n), plotDataAll.dates);\n        }\n      },\n      axisLeft: {\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        tickValues: 5,\n        format: offsetType !== 'expand' ? plotParameters.yAxisFormat : '.0%'\n      },\n      offsetType: offsetType,\n      colors: colors,\n      fillOpacity: 0.85,\n      animate: false,\n      enableGridX: false,\n      enableGridY: true,\n      legends: plotParameters.legends,\n      isInteractive: true,\n      enableStackTooltip: true,\n      tooltipFormat: x => /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 39\n        }\n      }, x.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/components/StreamPlot.js"],"names":["React","Component","ResponsiveStream","StreamPlot","render","darkMode","plotParameters","plotDataAll","plotTheme","offsetType","fullPlot","props","type","colors","d","map","x","plotKeys","length","index","Array","keys","reverse","plotData","top","right","bottom","left","orient","tickSize","tickPadding","tickRotation","format","idx","n","xAxisFormat","Math","round","dates","tickValues","yAxisFormat","legends","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { ResponsiveStream } from '@nivo/stream'\r\n\r\nexport default class StreamPlot extends Component {\r\n    render() {\r\n        const { darkMode, plotParameters, plotDataAll, plotTheme, offsetType, fullPlot } = this.props\r\n\r\n        if (plotParameters.type !== 'stream') return <div />\r\n\r\n        let colors = (d) =>\r\n            darkMode\r\n                ? [ 0, 1, 2, 3, 4, 5 ].map((x) => `var(--primary-color-${x})`)[\r\n                      plotDataAll.plotKeys.length - 1 - d.index\r\n                  ]\r\n                : [ 8, 6, 5, 4, 3, 2 ].map((x) => `var(--primary-color-${x})`)[\r\n                      plotDataAll.plotKeys.length - 1 - d.index\r\n                  ]\r\n\r\n        if (fullPlot) {\r\n            colors = (d) =>\r\n                darkMode\r\n                    ? [ ...Array(10).keys() ].map((x) => `var(--primary-color-${x})`)[\r\n                          plotDataAll.plotKeys.length - 1 - d.index\r\n                      ]\r\n                    : [ ...Array(10).keys() ].reverse().map((x) => `var(--primary-color-${x})`)[\r\n                          plotDataAll.plotKeys.length - 1 - d.index\r\n                      ]\r\n        }\r\n\r\n        return (\r\n            <ResponsiveStream\r\n                data={plotDataAll.plotData}\r\n                keys={plotDataAll.plotKeys}\r\n                theme={plotTheme}\r\n                curve=\"monotoneX\"\r\n                margin={{ top: 20, right: 115, bottom: 35, left: 40 }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    orient: 'bottom',\r\n                    tickSize: 0,\r\n                    tickPadding: 5,\r\n                    tickRotation: !fullPlot ? 0 : -30,\r\n                    format: (idx) => {\r\n                        const n = !fullPlot ? 5 : 10\r\n                        return plotParameters.xAxisFormat(\r\n                            idx,\r\n                            Math.round(plotDataAll.plotData.length / n),\r\n                            plotDataAll.dates\r\n                        )\r\n                    }\r\n                }}\r\n                axisLeft={{\r\n                    orient: 'left',\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    tickValues: 5,\r\n                    format: offsetType !== 'expand' ? plotParameters.yAxisFormat : '.0%'\r\n                }}\r\n                offsetType={offsetType}\r\n                colors={colors}\r\n                fillOpacity={0.85}\r\n                animate={false}\r\n                enableGridX={false}\r\n                enableGridY={true}\r\n                legends={plotParameters.legends}\r\n                isInteractive={true}\r\n                enableStackTooltip={true}\r\n                tooltipFormat={(x) => <b>{x.value}</b>}\r\n            />\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}