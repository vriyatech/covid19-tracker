{"ast":null,"code":"import addDays from 'date-fns/addDays';\nimport subDays from 'date-fns/subDays';\nimport format from 'date-fns/format';\nimport zhCN from 'date-fns/locale/zh-CN';\nimport i18n from '../data/i18n.yml';\nimport * as str from './strings';\nexport const parseDate = date => {\n  const [year, month, day] = date.substr(0, 10).split('-');\n  return new Date(year, month - 1, day);\n};\nexport const nextDay = (date, startDate, endDate) => {\n  const newDay = addDays(parseDate(date), 1);\n  const lastDay = parseDate(endDate);\n  return newDay <= lastDay ? format(newDay, 'yyyy-MM-dd') : startDate;\n};\nexport const previousDay = (date, startDate, endDate) => {\n  const newDay = subDays(parseDate(date), 1);\n  const firstDay = parseDate(startDate);\n  return newDay >= firstDay ? format(newDay, 'yyyy-MM-dd') : endDate;\n};\nexport const formatDate = (date, lang) => {\n  if (lang === 'zh') {\n    return format(parseDate(date), 'yyyy MMM d', {\n      locale: zhCN\n    });\n  } else {\n    return format(parseDate(date), 'MMM d, yyyy');\n  }\n};\nexport const metricText = {\n  confirmedCount: i18n.CONFIRMED,\n  deadCount: i18n.DEATHS,\n  curedCount: i18n.RECOVERED,\n  fatalityRate: i18n.FATALITY_RATE,\n  recoveryRate: i18n.RECOVERY_RATE\n};\nexport const getDataFromRegion = (data, region) => [data, ...region].reduce((s, x) => s[x]);\nexport const simplifyName = (name, lang) => {\n  let simplified = name; // remove parenthesis to save space for legend\n\n  if (lang === 'en') simplified = name.split('(')[0].trim();\n  if (lang === 'en') simplified = simplified.replace('United States of America', 'USA');\n  if (lang === 'en') simplified = simplified.replace('United Kingdom', 'UK');\n  if (lang === 'en') simplified = simplified.replace('International Conveyance', \"Int'l Conveyance\");\n  if (lang === 'en') simplified = simplified.replace(' District', '');\n  if (lang === 'en') simplified = simplified.replace(' County', '');\n  if (lang === 'zh') simplified = simplified.replace('（来自钻石公主号）', '').trim();\n  return simplified;\n};\nexport const updateDarkMode = isDarkMode => {\n  document.body.style.background = !isDarkMode ? '#fff' : 'var(--darker-grey)';\n\n  if (isDarkMode) {\n    document.body.classList.add('dark');\n  } else {\n    document.body.classList.remove('dark');\n  }\n};\nexport const generateTreeData = (obj, date, lang, simplified = true, childrenLabel = 'children', sortBy = null, rootRegion = str.GLOBAL_ZH) => {\n  let data = Object.entries(obj).filter(([k, v]) => !['confirmedCount', 'deadCount', 'curedCount', 'ENGLISH', str.GLOBAL_ZH].includes(k)).map(([k, v]) => {\n    const currentRegion = rootRegion === str.GLOBAL_ZH ? k : `${rootRegion}.${k}`;\n    let newdata = {\n      name: k,\n      displayName: lang === 'zh' ? k : v.ENGLISH,\n      region: currentRegion,\n      confirmedCount: Object.keys(v.confirmedCount).length === 0 ? '—' : v.confirmedCount[date] ? v.confirmedCount[date] : 0,\n      deadCount: Object.keys(v.deadCount).length === 0 ? '—' : v.deadCount[date] ? v.deadCount[date] : 0,\n      curedCount: Object.keys(v.curedCount).length === 0 ? '—' : v.curedCount[date] ? v.curedCount[date] : 0\n    }; // remove some regions for the simplicity of bubble plot\n\n    if (simplified && (k === str.LONDON_EN || obj.ENGLISH === str.NETHERLANDS_EN && k === str.NETHERLANDS_ZH || obj.ENGLISH === str.US_EN)) {\n      return newdata;\n    }\n\n    if (Object.keys(v).length > 4) {\n      newdata[childrenLabel] = generateTreeData(v, date, lang, simplified, childrenLabel, sortBy, currentRegion);\n    }\n\n    return newdata;\n  });\n  return sortBy ? data.sort((a, b) => a[sortBy] < b[sortBy] ? 1 : -1) : data;\n};","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/utils/utils.js"],"names":["addDays","subDays","format","zhCN","i18n","str","parseDate","date","year","month","day","substr","split","Date","nextDay","startDate","endDate","newDay","lastDay","previousDay","firstDay","formatDate","lang","locale","metricText","confirmedCount","CONFIRMED","deadCount","DEATHS","curedCount","RECOVERED","fatalityRate","FATALITY_RATE","recoveryRate","RECOVERY_RATE","getDataFromRegion","data","region","reduce","s","x","simplifyName","name","simplified","trim","replace","updateDarkMode","isDarkMode","document","body","style","background","classList","add","remove","generateTreeData","obj","childrenLabel","sortBy","rootRegion","GLOBAL_ZH","Object","entries","filter","k","v","includes","map","currentRegion","newdata","displayName","ENGLISH","keys","length","LONDON_EN","NETHERLANDS_EN","NETHERLANDS_ZH","US_EN","sort","a","b"],"mappings":"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","sourcesContent":["import addDays from 'date-fns/addDays'\r\nimport subDays from 'date-fns/subDays'\r\nimport format from 'date-fns/format'\r\nimport zhCN from 'date-fns/locale/zh-CN'\r\nimport i18n from '../data/i18n.yml'\r\nimport * as str from './strings'\r\n\r\nexport const parseDate = (date) => {\r\n    const [ year, month, day ] = date.substr(0, 10).split('-')\r\n    return new Date(year, month - 1, day)\r\n}\r\n\r\nexport const nextDay = (date, startDate, endDate) => {\r\n    const newDay = addDays(parseDate(date), 1)\r\n    const lastDay = parseDate(endDate)\r\n    return newDay <= lastDay ? format(newDay, 'yyyy-MM-dd') : startDate\r\n}\r\n\r\nexport const previousDay = (date, startDate, endDate) => {\r\n    const newDay = subDays(parseDate(date), 1)\r\n    const firstDay = parseDate(startDate)\r\n    return newDay >= firstDay ? format(newDay, 'yyyy-MM-dd') : endDate\r\n}\r\n\r\nexport const formatDate = (date, lang) => {\r\n    if (lang === 'zh') {\r\n        return format(parseDate(date), 'yyyy MMM d', { locale: zhCN })\r\n    } else {\r\n        return format(parseDate(date), 'MMM d, yyyy')\r\n    }\r\n}\r\n\r\nexport const metricText = {\r\n    confirmedCount: i18n.CONFIRMED,\r\n    deadCount: i18n.DEATHS,\r\n    curedCount: i18n.RECOVERED,\r\n    fatalityRate: i18n.FATALITY_RATE,\r\n    recoveryRate: i18n.RECOVERY_RATE\r\n}\r\n\r\nexport const getDataFromRegion = (data, region) => [ data, ...region ].reduce((s, x) => s[x])\r\n\r\nexport const simplifyName = (name, lang) => {\r\n    let simplified = name\r\n    // remove parenthesis to save space for legend\r\n    if (lang === 'en') simplified = name.split('(')[0].trim()\r\n\r\n    if (lang === 'en') simplified = simplified.replace('United States of America', 'USA')\r\n    if (lang === 'en') simplified = simplified.replace('United Kingdom', 'UK')\r\n    if (lang === 'en') simplified = simplified.replace('International Conveyance', \"Int'l Conveyance\")\r\n    if (lang === 'en') simplified = simplified.replace(' District', '')\r\n    if (lang === 'en') simplified = simplified.replace(' County', '')\r\n    if (lang === 'zh') simplified = simplified.replace('（来自钻石公主号）', '').trim()\r\n\r\n    return simplified\r\n}\r\n\r\nexport const updateDarkMode = (isDarkMode) => {\r\n    document.body.style.background = !isDarkMode ? '#fff' : 'var(--darker-grey)'\r\n    if (isDarkMode) {\r\n        document.body.classList.add('dark')\r\n    } else {\r\n        document.body.classList.remove('dark')\r\n    }\r\n}\r\n\r\nexport const generateTreeData = (\r\n    obj,\r\n    date,\r\n    lang,\r\n    simplified = true,\r\n    childrenLabel = 'children',\r\n    sortBy = null,\r\n    rootRegion = str.GLOBAL_ZH\r\n) => {\r\n    let data = Object.entries(obj)\r\n        .filter(([ k, v ]) => ![ 'confirmedCount', 'deadCount', 'curedCount', 'ENGLISH', str.GLOBAL_ZH ].includes(k))\r\n        .map(([ k, v ]) => {\r\n            const currentRegion = rootRegion === str.GLOBAL_ZH ? k : `${rootRegion}.${k}`\r\n            let newdata = {\r\n                name: k,\r\n                displayName: lang === 'zh' ? k : v.ENGLISH,\r\n                region: currentRegion,\r\n                confirmedCount:\r\n                    Object.keys(v.confirmedCount).length === 0\r\n                        ? '—'\r\n                        : v.confirmedCount[date] ? v.confirmedCount[date] : 0,\r\n                deadCount: Object.keys(v.deadCount).length === 0 ? '—' : v.deadCount[date] ? v.deadCount[date] : 0,\r\n                curedCount: Object.keys(v.curedCount).length === 0 ? '—' : v.curedCount[date] ? v.curedCount[date] : 0\r\n            }\r\n\r\n            // remove some regions for the simplicity of bubble plot\r\n            if (\r\n                simplified &&\r\n                (k === str.LONDON_EN ||\r\n                    (obj.ENGLISH === str.NETHERLANDS_EN && k === str.NETHERLANDS_ZH) ||\r\n                    obj.ENGLISH === str.US_EN)\r\n            ) {\r\n                return newdata\r\n            }\r\n\r\n            if (Object.keys(v).length > 4) {\r\n                newdata[childrenLabel] = generateTreeData(\r\n                    v,\r\n                    date,\r\n                    lang,\r\n                    simplified,\r\n                    childrenLabel,\r\n                    sortBy,\r\n                    currentRegion\r\n                )\r\n            }\r\n            return newdata\r\n        })\r\n\r\n    return sortBy ? data.sort((a, b) => (a[sortBy] < b[sortBy] ? 1 : -1)) : data\r\n}\r\n"]},"metadata":{},"sourceType":"module"}