{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\src\\\\components\\\\LinePlot.js\";\nimport React, { Component } from 'react';\nimport { ResponsiveLine } from '@nivo/line';\nimport { isMobile, isIPad13 } from 'react-device-detect';\nimport { parseDate } from '../utils/utils';\nimport * as str from '../utils/strings';\nimport us_map from '../data/us_map.yml';\nexport default class LinePlot extends Component {\n  render() {\n    const {\n      currentRegion,\n      fullPlot,\n      darkMode,\n      scale,\n      lang,\n      playing,\n      tempDate,\n      startDate,\n      endDate,\n      plotParameters,\n      plotDataAll,\n      tickValues,\n      plotTheme,\n      currentMap\n    } = this.props;\n    if (plotParameters.type !== 'line') return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 52\n      }\n    });\n    return /*#__PURE__*/React.createElement(ResponsiveLine, {\n      margin: {\n        top: 20,\n        right: 20,\n        bottom: !fullPlot ? 60 : 80,\n        left: 50,\n        ...plotParameters.margin\n      },\n      theme: plotTheme,\n      animate: fullPlot || currentMap !== str.US_MAP2 || currentMap === str.US_MAP2 && currentRegion.length >= 2 && currentRegion[1] in us_map,\n      data: plotDataAll.plotData,\n      colors: d => d.color,\n      xFormat: plotParameters.xFormat != null ? plotParameters.xFormat : 'time:%Y-%m-%d',\n      yFormat: plotParameters.yFormat,\n      xScale: plotParameters.xScale != null ? plotParameters.xScale : !plotParameters.xLog ? {\n        type: 'time',\n        format: '%Y-%m-%d',\n        precision: 'day',\n        useUTC: false\n      } : {\n        type: 'log',\n        min: plotDataAll.logTickMin,\n        max: plotDataAll.logTickMax\n      },\n      yScale: plotParameters.yScale != null ? plotParameters.yScale : scale === 'linear' || !plotParameters.log ? {\n        type: 'linear',\n        max: 'auto',\n        min: 'auto'\n      } : {\n        type: 'log',\n        min: plotDataAll.logTickMin,\n        max: plotDataAll.logTickMax\n      },\n      axisLeft: {\n        orient: 'left',\n        // do not show ticks with non-integer values\n        format: plotParameters.yAxisFormat,\n        tickSize: 0,\n        tickValues: plotParameters.yTickValues != null ? plotParameters.yTickValues : tickValues,\n        legend: plotParameters.yLegend != null ? plotParameters.yLegend[lang] : '',\n        legendOffset: plotParameters.yLegendOffset != null ? plotParameters.yLegendOffset : -40,\n        legendPosition: 'middle'\n      },\n      axisBottom: {\n        orient: 'bottom',\n        format: plotParameters.xAxisFormat,\n        tickValues: plotParameters.xTickValues != null ? plotParameters.xTickValues : !fullPlot ? 5 : 10,\n        tickRotation: plotParameters.xTickRotation != null ? plotParameters.xTickRotation : !fullPlot ? 0 : -30,\n        legend: plotParameters.xLegend != null ? plotParameters.xLegend[lang] : '',\n        legendOffset: 40,\n        legendPosition: 'middle'\n      },\n      enableGridX: false,\n      gridYValues: plotParameters.yTickValues != null ? plotParameters.yTickValues : tickValues,\n      pointSize: plotParameters.pointSize != null ? plotParameters.pointSize : 6,\n      pointBorderWidth: plotParameters.pointBorderWidth,\n      pointBorderColor: darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)',\n      useMesh: true,\n      enableArea: false,\n      enablePointLabel: plotParameters.enablePointLabel,\n      pointLabel: plotParameters.pointLabel,\n      pointLabelYOffset: plotParameters.pointLabelYOffset ? plotParameters.pointLabelYOffset : -6,\n      enableSlices: plotParameters.enableSlices != null ? plotParameters.enableSlices : 'x',\n      curve: 'monotoneX',\n      tooltip: plotParameters.tooltip,\n      markers: plotParameters.hideMarkers ? [] : !playing && tempDate !== startDate && tempDate !== endDate ? [{\n        axis: 'x',\n        value: parseDate(tempDate),\n        lineStyle: {\n          stroke: darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)',\n          strokeWidth: 1,\n          strokeDasharray: '6 6'\n        }\n      }] : [],\n      legends: plotParameters.legends != null ? plotParameters.legends : [{\n        anchor: 'bottom',\n        direction: 'row',\n        justify: false,\n        translateX: 0,\n        translateY: !fullPlot ? 50 : 70,\n        itemsSpacing: 10,\n        itemDirection: 'left-to-right',\n        itemWidth: plotParameters.legendItemWidth,\n        itemHeight: 20,\n        itemOpacity: 0.75,\n        symbolSize: 12,\n        symbolShape: 'circle',\n        symbolBorderColor: 'rgba(0, 0, 0, .5)',\n        effects: []\n      }],\n      onClick: ({\n        serieId,\n        data\n      }) => {\n        if (isMobile || isIPad13) return;\n        if (!plotParameters.subregions || serieId == null || data.noClick) return;\n        this.props.regionToggle(currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH ? [serieId] : [...currentRegion, serieId]);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/components/LinePlot.js"],"names":["React","Component","ResponsiveLine","isMobile","isIPad13","parseDate","str","us_map","LinePlot","render","currentRegion","fullPlot","darkMode","scale","lang","playing","tempDate","startDate","endDate","plotParameters","plotDataAll","tickValues","plotTheme","currentMap","props","type","top","right","bottom","left","margin","US_MAP2","length","plotData","d","color","xFormat","yFormat","xScale","xLog","format","precision","useUTC","min","logTickMin","max","logTickMax","yScale","log","orient","yAxisFormat","tickSize","yTickValues","legend","yLegend","legendOffset","yLegendOffset","legendPosition","xAxisFormat","xTickValues","tickRotation","xTickRotation","xLegend","pointSize","pointBorderWidth","enablePointLabel","pointLabel","pointLabelYOffset","enableSlices","tooltip","hideMarkers","axis","value","lineStyle","stroke","strokeWidth","strokeDasharray","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","legendItemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","serieId","data","subregions","noClick","regionToggle","GLOBAL_ZH"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,qBAAnC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,eAAe,MAAMC,QAAN,SAAuBP,SAAvB,CAAiC;AAC5CQ,EAAAA,MAAM,GAAG;AACL,UAAM;AACFC,MAAAA,aADE;AAEFC,MAAAA,QAFE;AAGFC,MAAAA,QAHE;AAIFC,MAAAA,KAJE;AAKFC,MAAAA,IALE;AAMFC,MAAAA,OANE;AAOFC,MAAAA,QAPE;AAQFC,MAAAA,SARE;AASFC,MAAAA,OATE;AAUFC,MAAAA,cAVE;AAWFC,MAAAA,WAXE;AAYFC,MAAAA,UAZE;AAaFC,MAAAA,SAbE;AAcFC,MAAAA;AAdE,QAeF,KAAKC,KAfT;AAiBA,QAAIL,cAAc,CAACM,IAAf,KAAwB,MAA5B,EAAoC,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEpC,wBACI,oBAAC,cAAD;AACI,MAAA,MAAM,EAAE;AACJC,QAAAA,GAAG,EAAE,EADD;AAEJC,QAAAA,KAAK,EAAE,EAFH;AAGJC,QAAAA,MAAM,EAAE,CAACjB,QAAD,GAAY,EAAZ,GAAiB,EAHrB;AAIJkB,QAAAA,IAAI,EAAE,EAJF;AAKJ,WAAGV,cAAc,CAACW;AALd,OADZ;AAQI,MAAA,KAAK,EAAER,SARX;AASI,MAAA,OAAO,EACHX,QAAQ,IACRY,UAAU,KAAKjB,GAAG,CAACyB,OADnB,IAECR,UAAU,KAAKjB,GAAG,CAACyB,OAAnB,IAA8BrB,aAAa,CAACsB,MAAd,IAAwB,CAAtD,IAA2DtB,aAAa,CAAC,CAAD,CAAb,IAAoBH,MAZxF;AAcI,MAAA,IAAI,EAAEa,WAAW,CAACa,QAdtB;AAeI,MAAA,MAAM,EAAGC,CAAD,IAAOA,CAAC,CAACC,KAfrB;AAgBI,MAAA,OAAO,EAAEhB,cAAc,CAACiB,OAAf,IAA0B,IAA1B,GAAiCjB,cAAc,CAACiB,OAAhD,GAA0D,eAhBvE;AAiBI,MAAA,OAAO,EAAEjB,cAAc,CAACkB,OAjB5B;AAkBI,MAAA,MAAM,EACFlB,cAAc,CAACmB,MAAf,IAAyB,IAAzB,GACInB,cAAc,CAACmB,MADnB,GAEI,CAACnB,cAAc,CAACoB,IAAhB,GACA;AACId,QAAAA,IAAI,EAAE,MADV;AAEIe,QAAAA,MAAM,EAAE,UAFZ;AAGIC,QAAAA,SAAS,EAAE,KAHf;AAIIC,QAAAA,MAAM,EAAE;AAJZ,OADA,GAQA;AACIjB,QAAAA,IAAI,EAAE,KADV;AAEIkB,QAAAA,GAAG,EAAEvB,WAAW,CAACwB,UAFrB;AAGIC,QAAAA,GAAG,EAAEzB,WAAW,CAAC0B;AAHrB,OA7BZ;AAoCI,MAAA,MAAM,EACF3B,cAAc,CAAC4B,MAAf,IAAyB,IAAzB,GACI5B,cAAc,CAAC4B,MADnB,GAEIlC,KAAK,KAAK,QAAV,IAAsB,CAACM,cAAc,CAAC6B,GAAtC,GACA;AACIvB,QAAAA,IAAI,EAAE,QADV;AAEIoB,QAAAA,GAAG,EAAE,MAFT;AAGIF,QAAAA,GAAG,EAAE;AAHT,OADA,GAOA;AACIlB,QAAAA,IAAI,EAAE,KADV;AAEIkB,QAAAA,GAAG,EAAEvB,WAAW,CAACwB,UAFrB;AAGIC,QAAAA,GAAG,EAAEzB,WAAW,CAAC0B;AAHrB,OA9CZ;AAqDI,MAAA,QAAQ,EAAE;AACNG,QAAAA,MAAM,EAAE,MADF;AAEN;AACAT,QAAAA,MAAM,EAAErB,cAAc,CAAC+B,WAHjB;AAINC,QAAAA,QAAQ,EAAE,CAJJ;AAKN9B,QAAAA,UAAU,EAAEF,cAAc,CAACiC,WAAf,IAA8B,IAA9B,GAAqCjC,cAAc,CAACiC,WAApD,GAAkE/B,UALxE;AAMNgC,QAAAA,MAAM,EAAElC,cAAc,CAACmC,OAAf,IAA0B,IAA1B,GAAiCnC,cAAc,CAACmC,OAAf,CAAuBxC,IAAvB,CAAjC,GAAgE,EANlE;AAONyC,QAAAA,YAAY,EAAEpC,cAAc,CAACqC,aAAf,IAAgC,IAAhC,GAAuCrC,cAAc,CAACqC,aAAtD,GAAsE,CAAC,EAP/E;AAQNC,QAAAA,cAAc,EAAE;AARV,OArDd;AA+DI,MAAA,UAAU,EAAE;AACRR,QAAAA,MAAM,EAAE,QADA;AAERT,QAAAA,MAAM,EAAErB,cAAc,CAACuC,WAFf;AAGRrC,QAAAA,UAAU,EAAEF,cAAc,CAACwC,WAAf,IAA8B,IAA9B,GAAqCxC,cAAc,CAACwC,WAApD,GAAkE,CAAChD,QAAD,GAAY,CAAZ,GAAgB,EAHtF;AAIRiD,QAAAA,YAAY,EACRzC,cAAc,CAAC0C,aAAf,IAAgC,IAAhC,GAAuC1C,cAAc,CAAC0C,aAAtD,GAAsE,CAAClD,QAAD,GAAY,CAAZ,GAAgB,CAAC,EALnF;AAMR0C,QAAAA,MAAM,EAAElC,cAAc,CAAC2C,OAAf,IAA0B,IAA1B,GAAiC3C,cAAc,CAAC2C,OAAf,CAAuBhD,IAAvB,CAAjC,GAAgE,EANhE;AAORyC,QAAAA,YAAY,EAAE,EAPN;AAQRE,QAAAA,cAAc,EAAE;AARR,OA/DhB;AAyEI,MAAA,WAAW,EAAE,KAzEjB;AA0EI,MAAA,WAAW,EAAEtC,cAAc,CAACiC,WAAf,IAA8B,IAA9B,GAAqCjC,cAAc,CAACiC,WAApD,GAAkE/B,UA1EnF;AA2EI,MAAA,SAAS,EAAEF,cAAc,CAAC4C,SAAf,IAA4B,IAA5B,GAAmC5C,cAAc,CAAC4C,SAAlD,GAA8D,CA3E7E;AA4EI,MAAA,gBAAgB,EAAE5C,cAAc,CAAC6C,gBA5ErC;AA6EI,MAAA,gBAAgB,EAAEpD,QAAQ,GAAG,wBAAH,GAA8B,wBA7E5D;AA8EI,MAAA,OAAO,EAAE,IA9Eb;AA+EI,MAAA,UAAU,EAAE,KA/EhB;AAgFI,MAAA,gBAAgB,EAAEO,cAAc,CAAC8C,gBAhFrC;AAiFI,MAAA,UAAU,EAAE9C,cAAc,CAAC+C,UAjF/B;AAkFI,MAAA,iBAAiB,EAAE/C,cAAc,CAACgD,iBAAf,GAAmChD,cAAc,CAACgD,iBAAlD,GAAsE,CAAC,CAlF9F;AAmFI,MAAA,YAAY,EAAEhD,cAAc,CAACiD,YAAf,IAA+B,IAA/B,GAAsCjD,cAAc,CAACiD,YAArD,GAAoE,GAnFtF;AAoFI,MAAA,KAAK,EAAE,WApFX;AAqFI,MAAA,OAAO,EAAEjD,cAAc,CAACkD,OArF5B;AAsFI,MAAA,OAAO,EACHlD,cAAc,CAACmD,WAAf,GACI,EADJ,GAEI,CAACvD,OAAD,IAAYC,QAAQ,KAAKC,SAAzB,IAAsCD,QAAQ,KAAKE,OAAnD,GACA,CACI;AACIqD,QAAAA,IAAI,EAAE,GADV;AAEIC,QAAAA,KAAK,EAAEnE,SAAS,CAACW,QAAD,CAFpB;AAGIyD,QAAAA,SAAS,EAAE;AACPC,UAAAA,MAAM,EAAE9D,QAAQ,GAAG,wBAAH,GAA8B,wBADvC;AAEP+D,UAAAA,WAAW,EAAE,CAFN;AAGPC,UAAAA,eAAe,EAAE;AAHV;AAHf,OADJ,CADA,GAaA,EAtGZ;AAyGI,MAAA,OAAO,EACHzD,cAAc,CAAC0D,OAAf,IAA0B,IAA1B,GACI1D,cAAc,CAAC0D,OADnB,GAGI,CACI;AACIC,QAAAA,MAAM,EAAE,QADZ;AAEIC,QAAAA,SAAS,EAAE,KAFf;AAGIC,QAAAA,OAAO,EAAE,KAHb;AAIIC,QAAAA,UAAU,EAAE,CAJhB;AAKIC,QAAAA,UAAU,EAAE,CAACvE,QAAD,GAAY,EAAZ,GAAiB,EALjC;AAMIwE,QAAAA,YAAY,EAAE,EANlB;AAOIC,QAAAA,aAAa,EAAE,eAPnB;AAQIC,QAAAA,SAAS,EAAElE,cAAc,CAACmE,eAR9B;AASIC,QAAAA,UAAU,EAAE,EAThB;AAUIC,QAAAA,WAAW,EAAE,IAVjB;AAWIC,QAAAA,UAAU,EAAE,EAXhB;AAYIC,QAAAA,WAAW,EAAE,QAZjB;AAaIC,QAAAA,iBAAiB,EAAE,mBAbvB;AAcIC,QAAAA,OAAO,EAAE;AAdb,OADJ,CA7GZ;AAiII,MAAA,OAAO,EAAE,CAAC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAAD,KAAuB;AAC5B,YAAI3F,QAAQ,IAAIC,QAAhB,EAA0B;AAC1B,YAAI,CAACe,cAAc,CAAC4E,UAAhB,IAA8BF,OAAO,IAAI,IAAzC,IAAiDC,IAAI,CAACE,OAA1D,EAAmE;AACnE,aAAKxE,KAAL,CAAWyE,YAAX,CACIvF,aAAa,CAACsB,MAAd,KAAyB,CAAzB,IAA8BtB,aAAa,CAAC,CAAD,CAAb,KAAqBJ,GAAG,CAAC4F,SAAvD,GACM,CAAEL,OAAF,CADN,GAEM,CAAE,GAAGnF,aAAL,EAAoBmF,OAApB,CAHV;AAKH,OAzIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AA6IH;;AAlK2C","sourcesContent":["import React, { Component } from 'react'\r\nimport { ResponsiveLine } from '@nivo/line'\r\nimport { isMobile, isIPad13 } from 'react-device-detect'\r\nimport { parseDate } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\nimport us_map from '../data/us_map.yml'\r\n\r\nexport default class LinePlot extends Component {\r\n    render() {\r\n        const {\r\n            currentRegion,\r\n            fullPlot,\r\n            darkMode,\r\n            scale,\r\n            lang,\r\n            playing,\r\n            tempDate,\r\n            startDate,\r\n            endDate,\r\n            plotParameters,\r\n            plotDataAll,\r\n            tickValues,\r\n            plotTheme,\r\n            currentMap\r\n        } = this.props\r\n\r\n        if (plotParameters.type !== 'line') return <div />\r\n\r\n        return (\r\n            <ResponsiveLine\r\n                margin={{\r\n                    top: 20,\r\n                    right: 20,\r\n                    bottom: !fullPlot ? 60 : 80,\r\n                    left: 50,\r\n                    ...plotParameters.margin\r\n                }}\r\n                theme={plotTheme}\r\n                animate={\r\n                    fullPlot ||\r\n                    currentMap !== str.US_MAP2 ||\r\n                    (currentMap === str.US_MAP2 && currentRegion.length >= 2 && currentRegion[1] in us_map)\r\n                }\r\n                data={plotDataAll.plotData}\r\n                colors={(d) => d.color}\r\n                xFormat={plotParameters.xFormat != null ? plotParameters.xFormat : 'time:%Y-%m-%d'}\r\n                yFormat={plotParameters.yFormat}\r\n                xScale={\r\n                    plotParameters.xScale != null ? (\r\n                        plotParameters.xScale\r\n                    ) : !plotParameters.xLog ? (\r\n                        {\r\n                            type: 'time',\r\n                            format: '%Y-%m-%d',\r\n                            precision: 'day',\r\n                            useUTC: false\r\n                        }\r\n                    ) : (\r\n                        {\r\n                            type: 'log',\r\n                            min: plotDataAll.logTickMin,\r\n                            max: plotDataAll.logTickMax\r\n                        }\r\n                    )\r\n                }\r\n                yScale={\r\n                    plotParameters.yScale != null ? (\r\n                        plotParameters.yScale\r\n                    ) : scale === 'linear' || !plotParameters.log ? (\r\n                        {\r\n                            type: 'linear',\r\n                            max: 'auto',\r\n                            min: 'auto'\r\n                        }\r\n                    ) : (\r\n                        {\r\n                            type: 'log',\r\n                            min: plotDataAll.logTickMin,\r\n                            max: plotDataAll.logTickMax\r\n                        }\r\n                    )\r\n                }\r\n                axisLeft={{\r\n                    orient: 'left',\r\n                    // do not show ticks with non-integer values\r\n                    format: plotParameters.yAxisFormat,\r\n                    tickSize: 0,\r\n                    tickValues: plotParameters.yTickValues != null ? plotParameters.yTickValues : tickValues,\r\n                    legend: plotParameters.yLegend != null ? plotParameters.yLegend[lang] : '',\r\n                    legendOffset: plotParameters.yLegendOffset != null ? plotParameters.yLegendOffset : -40,\r\n                    legendPosition: 'middle'\r\n                }}\r\n                axisBottom={{\r\n                    orient: 'bottom',\r\n                    format: plotParameters.xAxisFormat,\r\n                    tickValues: plotParameters.xTickValues != null ? plotParameters.xTickValues : !fullPlot ? 5 : 10,\r\n                    tickRotation:\r\n                        plotParameters.xTickRotation != null ? plotParameters.xTickRotation : !fullPlot ? 0 : -30,\r\n                    legend: plotParameters.xLegend != null ? plotParameters.xLegend[lang] : '',\r\n                    legendOffset: 40,\r\n                    legendPosition: 'middle'\r\n                }}\r\n                enableGridX={false}\r\n                gridYValues={plotParameters.yTickValues != null ? plotParameters.yTickValues : tickValues}\r\n                pointSize={plotParameters.pointSize != null ? plotParameters.pointSize : 6}\r\n                pointBorderWidth={plotParameters.pointBorderWidth}\r\n                pointBorderColor={darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)'}\r\n                useMesh={true}\r\n                enableArea={false}\r\n                enablePointLabel={plotParameters.enablePointLabel}\r\n                pointLabel={plotParameters.pointLabel}\r\n                pointLabelYOffset={plotParameters.pointLabelYOffset ? plotParameters.pointLabelYOffset : -6}\r\n                enableSlices={plotParameters.enableSlices != null ? plotParameters.enableSlices : 'x'}\r\n                curve={'monotoneX'}\r\n                tooltip={plotParameters.tooltip}\r\n                markers={\r\n                    plotParameters.hideMarkers ? (\r\n                        []\r\n                    ) : !playing && tempDate !== startDate && tempDate !== endDate ? (\r\n                        [\r\n                            {\r\n                                axis: 'x',\r\n                                value: parseDate(tempDate),\r\n                                lineStyle: {\r\n                                    stroke: darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)',\r\n                                    strokeWidth: 1,\r\n                                    strokeDasharray: '6 6'\r\n                                }\r\n                            }\r\n                        ]\r\n                    ) : (\r\n                        []\r\n                    )\r\n                }\r\n                legends={\r\n                    plotParameters.legends != null ? (\r\n                        plotParameters.legends\r\n                    ) : (\r\n                        [\r\n                            {\r\n                                anchor: 'bottom',\r\n                                direction: 'row',\r\n                                justify: false,\r\n                                translateX: 0,\r\n                                translateY: !fullPlot ? 50 : 70,\r\n                                itemsSpacing: 10,\r\n                                itemDirection: 'left-to-right',\r\n                                itemWidth: plotParameters.legendItemWidth,\r\n                                itemHeight: 20,\r\n                                itemOpacity: 0.75,\r\n                                symbolSize: 12,\r\n                                symbolShape: 'circle',\r\n                                symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                                effects: []\r\n                            }\r\n                        ]\r\n                    )\r\n                }\r\n                onClick={({ serieId, data }) => {\r\n                    if (isMobile || isIPad13) return\r\n                    if (!plotParameters.subregions || serieId == null || data.noClick) return\r\n                    this.props.regionToggle(\r\n                        currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH\r\n                            ? [ serieId ]\r\n                            : [ ...currentRegion, serieId ]\r\n                    )\r\n                }}\r\n            />\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}