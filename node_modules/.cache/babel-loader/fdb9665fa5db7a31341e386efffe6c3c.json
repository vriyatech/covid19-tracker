{"ast":null,"code":"import _toConsumableArray from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component,Fragment}from'react';import{ComposableMap,ZoomableGroup,Geographies,Geography,Marker,Line}from'react-simple-maps';import{scaleSequential,scaleLog,scaleLinear}from'd3-scale';import{interpolateMagma}from'd3-scale-chromatic';import{PatternLines}from'@vx/pattern';import{isMobile,isIPad13}from'react-device-detect';import{TinyColor}from'@ctrl/tinycolor';import{FaShip}from'react-icons/fa';import Toggle from'react-toggle';import'react-toggle/style.css';import maps from'../data/maps.yml';import us_map from'../data/us_map.yml';import transmissions from'../data/transmissions.yml';import coord from'../data/transmissions_coord.yml';import{getDataFromRegion,parseDate}from'../utils/utils';import*as str from'../utils/strings';import i18n from'../data/i18n.yml';var Map=/*#__PURE__*/function(_Component){_inherits(Map,_Component);var _super=_createSuper(Map);function Map(){var _this;_classCallCheck(this,Map);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={loaded:false,cursor:[0,0],clicked:false,showTransmissions:false,usState:null};_this.handleGeographyClick=function(region){return function(){if(!_this.state.clicked||region==null)return;_this.props.regionToggle(region.split('.'));};};_this.onZoomEnd=function(event,state){_this.props.handleMapZoomChange(state.zoom);};_this.getConfig=function(config,defaultConfig){return config!=null?config.split(',').map(function(d){return parseInt(d,10);}):defaultConfig;};_this.getColorScale=function(isUsState){var _this$props=_this.props,data=_this$props.data,currentRegion=_this$props.currentRegion,scale=_this$props.scale,metric=_this$props.metric,darkMode=_this$props.darkMode;var currentMap=maps[_this.props.currentMap];var currentScale=scale==='linear'?scaleLinear:scaleLog;var maxCount=currentMap[\"maxScale_\".concat(metric)];if(isUsState&&metric==='confirmedCount'){var stateData=getDataFromRegion(data,currentRegion.slice(0,2));maxCount=Math.max.apply(Math,_toConsumableArray(Object.keys(stateData).filter(function(x){return!['confirmedCount','curedCount','deadCount','ENGLISH'].includes(x);}).map(function(county){return Math.max.apply(Math,_toConsumableArray(Object.values(stateData[county][metric])));})));}var mapScale=currentScale().domain([1,maxCount]).clamp(true);var colorConvert=function colorConvert(x){return darkMode?x*0.95+0.05:0.95-x*0.95;};var colorScale=scaleSequential(function(d){if(!_this.state.showTransmissions||_this.props.currentMap!==str.WORLD_MAP){var color=new TinyColor(interpolateMagma(colorConvert(mapScale(d))));if(!darkMode)return color.toRgbString();return color.desaturate(10).toRgbString();}else{var greyedColor=new TinyColor(interpolateMagma(colorConvert(mapScale(d)))).desaturate(100);if(!darkMode)return greyedColor.setAlpha(0.6).toRgbString();// make the colors distinguishable from dark background\nreturn greyedColor.getLuminance()<0.09?greyedColor.darken(5).setAlpha(0.9).toRgbString():greyedColor.lighten(5).setAlpha(0.9).toRgbString();}});return{colorScale:colorScale,mapScale:mapScale};};_this.getStrokeColor=function(counts,isUsState){var _this$getColorScale=_this.getColorScale(isUsState),colorScale=_this$getColorScale.colorScale,mapScale=_this$getColorScale.mapScale;var darkMode=_this.props.darkMode;var tinyColor=new TinyColor(colorScale(counts));if(!darkMode){return tinyColor.isDark()?colorScale(mapScale.invert(mapScale(counts)-0.6)):colorScale(mapScale.invert(mapScale(counts)+0.3));}else{return tinyColor.isDark()?colorScale(mapScale.invert(mapScale(counts)+0.5)):colorScale(mapScale.invert(mapScale(counts)-0.5));}};return _this;}_createClass(Map,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){var _this2=this;if(this.props.currentMap!==prevProps.currentMap||this.state.usState!==prevState.usState){this.setState({loaded:false});setTimeout(function(){_this2.props.tooltipRebuild();},100);}if(this.props.currentMap===str.US_MAP2){var usState=this.props.currentRegion[1];if(usState!==this.state.usState){this.setState({usState:usState});}}}},{key:\"render\",value:function render(){var _this3=this;if(this.props.currentMap===str.TRANSMISSION)return/*#__PURE__*/React.createElement(\"div\",null);var currentMap=maps[this.props.currentMap];var _this$props2=this.props,data=_this$props2.data,metric=_this$props2.metric,date=_this$props2.date,lang=_this$props2.lang,currentRegion=_this$props2.currentRegion,mapZoom=_this$props2.mapZoom,darkMode=_this$props2.darkMode;var isUsState=this.props.currentMap===str.US_MAP2&&this.state.usState!=null&&this.state.usState in us_map;var center=isUsState?us_map[this.state.usState].center.split(',').map(function(d){return parseFloat(d);}):currentMap.center.split(',').map(function(d){return parseFloat(d);});var scale=isUsState?us_map[this.state.usState].scale:currentMap.scale;var projection=isUsState?'geoMercator':currentMap.projection;var _this$getColorScale2=this.getColorScale(isUsState),colorScale=_this$getColorScale2.colorScale;var cruiseData=getDataFromRegion(data,[str.INTL_CONVEYANCE_ZH,str.DIAMOND_PRINCESS_ZH]);var cruiseCounts=cruiseData[metric][date]?cruiseData[metric][date]:0;var cruiseStrokeColor=this.getStrokeColor(cruiseCounts,isUsState);var greyStrokeColor=darkMode?'var(--primary-color-10)':'var(--grey)';return/*#__PURE__*/React.createElement(Fragment,null,this.props.currentMap===str.WORLD_MAP&&/*#__PURE__*/React.createElement(\"div\",{className:\"map-transmission-toggle-wrap\"},/*#__PURE__*/React.createElement(Toggle,{className:\"map-transmission-toggle\",defaultChecked:this.state.showTransmissions,onChange:function onChange(){return _this3.setState({showTransmissions:!_this3.state.showTransmissions});},icons:false}),/*#__PURE__*/React.createElement(\"span\",null,i18n.TRANSMISSIONS[this.props.lang])),/*#__PURE__*/React.createElement(ComposableMap,{projection:projection,projectionConfig:{scale:scale,rotate:currentMap.rotate?currentMap.rotate.split(',').map(function(x){return parseInt(x,10);}):[0,0,0],parallels:[0,0]}},/*#__PURE__*/React.createElement(PatternLines,{id:\"lines\",height:6,width:6,stroke:greyStrokeColor,strokeWidth:1,background:darkMode?'var(--darker-grey)':'#fff',orientation:['diagonal']}),/*#__PURE__*/React.createElement(PatternLines,{id:\"background-lines\",height:6,width:6,stroke:darkMode?'#333':'#ddd',strokeWidth:1,background:darkMode?'var(--darker-grey)':'#fff',orientation:['diagonal']}),/*#__PURE__*/React.createElement(ZoomableGroup,{zoom:mapZoom,onZoomEnd:this.onZoomEnd,onMoveStart:function onMoveStart(e,m){return _this3.setState({cursor:[m.x,m.y],clicked:false});},onMoveEnd:function onMoveEnd(e,m){// click on desktop\nif(Math.abs(m.x-_this3.state.cursor[0])<1&&Math.abs(m.y-_this3.state.cursor[1])<1)_this3.setState({clicked:true});},onTouchStart:// click on touch screens\nisMobile||isIPad13?function(){return _this3.setState({clicked:true});}:null,center:center,minZoom:0.2,maxZoom:5,disableZooming:isMobile||isIPad13,disablePanning:isMobile||isIPad13},![str.WORLD_MAP,str.US_MAP].includes(this.props.currentMap)&&/*#__PURE__*/React.createElement(Geographies,{geography:\"maps/\".concat(this.props.currentMap!==str.US_MAP2?'world-50m':'states-10m',\".json\"),onMouseEnter:function onMouseEnter(){if(!_this3.state.loaded){_this3.setState({loaded:true});_this3.props.tooltipRebuild();}}},function(_ref){var geographies=_ref.geographies;return geographies.map(function(geo){var counts=0;if(geo.properties.REGION!=null){var region=getDataFromRegion(data,geo.properties.REGION.split('.'));if(region&&region[metric]&&region[metric][date])counts=region[metric][date];}var backgroundMap=_this3.props.currentMap!==str.US_MAP2?str.WORLD_MAP:str.US_MAP;var name=geo.properties[maps[backgroundMap].name_key[lang]];var isCurrentCountryOrState=backgroundMap===str.WORLD_MAP?geo.properties.CHINESE_NAME===currentRegion[0]:geo.properties.CHINESE_NAME===currentRegion[1];if(isCurrentCountryOrState)return/*#__PURE__*/React.createElement(\"div\",null);if(backgroundMap===str.US_MAP&&currentRegion.length===1)return/*#__PURE__*/React.createElement(\"div\",null);return/*#__PURE__*/React.createElement(Geography,{className:\"map-geography\",key:geo.rsmKey,geography:geo,\"data-tip\":\"\".concat(name,\" <span class=\\\"plot-tooltip-bold\\\">\").concat(counts,\"</span>\"),style:{default:{fill:darkMode?'var(--darker-grey)':'#fff',stroke:darkMode?'#333':'#ddd',strokeWidth:2},hover:{fill:\"url(\\\"#background-lines\\\") \".concat(darkMode?'#333':'#ddd'),stroke:darkMode?'#333':'#ddd',strokeWidth:2,cursor:counts>0?'pointer':'default'},pressed:{fill:\"url(\\\"#background-lines\\\") \".concat(darkMode?'#333':'#ddd'),stroke:darkMode?'#333':'#ddd',strokeWidth:2,cursor:counts>0?'pointer':'default'}},onClick:_this3.handleGeographyClick(geo.properties.REGION)});});}),/*#__PURE__*/React.createElement(Geographies,{geography:\"maps/\".concat(currentMap.filename),onMouseEnter:function onMouseEnter(){if(!_this3.state.loaded){_this3.setState({loaded:true});_this3.props.tooltipRebuild();}}},function(_ref2){var geographies=_ref2.geographies;return geographies.map(function(geo,i){var counts=0;if(geo.properties.REGION!=null){var region=getDataFromRegion(data,geo.properties.REGION.split('.'));if(region&&region[metric]&&region[metric][date])counts=region[metric][date];}var name=geo.properties[currentMap.name_key[lang]];var isCurrentRegion=geo.properties[currentMap.name_key.zh]===currentRegion[currentRegion.length-1];if(currentMap.parent_key)isCurrentRegion=isCurrentRegion&&geo.properties[currentMap.parent_key]===currentRegion[currentRegion.length-2];// highlight all cities in the province\nvar isParentRegion=false;if(currentMap.parent_key){isParentRegion=geo.properties[currentMap.parent_key]===currentRegion[currentRegion.length-1];if(currentRegion.length>=3)isParentRegion=isParentRegion||geo.properties[currentMap.parent_key]===currentRegion[currentRegion.length-2];if(currentRegion.length===1||currentRegion[currentRegion.length-1]===str.MAINLAND_CHINA_ZH)isParentRegion=true;isParentRegion=isParentRegion||isCurrentRegion;}else{isParentRegion=true;}var strokeColor=counts===0?greyStrokeColor:_this3.getStrokeColor(counts,isUsState);// US map\nif(_this3.props.currentMap===str.US_MAP2&&!isParentRegion)return/*#__PURE__*/React.createElement(\"div\",null);return/*#__PURE__*/React.createElement(Fragment,{key:\"fragment-\".concat(geo.rsmKey)},/*#__PURE__*/React.createElement(Geography,{key:geo.rsmKey,className:\"map-geography\",geography:geo,\"data-tip\":\"\".concat(name,\" <span class=\\\"plot-tooltip-bold\\\">\").concat(counts,\"</span>\"),style:{default:{fill:isCurrentRegion?\"url(\\\"#highlightLines-\".concat(i,\"\\\") \").concat(greyStrokeColor):counts>0?colorScale(counts):'url(\"#lines\")',stroke:strokeColor,strokeWidth:isCurrentRegion?1:0,opacity:isParentRegion?1:0.2},hover:{fill:\"url(\\\"#highlightLines-\".concat(i,\"\\\") \").concat(greyStrokeColor),strokeWidth:1,stroke:strokeColor,cursor:counts>0?'pointer':'default'},pressed:{fill:\"url(\\\"#highlightLines-\".concat(i,\"\\\") \").concat(greyStrokeColor),strokeWidth:1,stroke:strokeColor,cursor:counts>0?'pointer':'default'}},onClick:_this3.handleGeographyClick(geo.properties.REGION)}),/*#__PURE__*/React.createElement(PatternLines,{id:\"highlightLines-\".concat(i),height:6,width:6,stroke:strokeColor,strokeWidth:1,background:counts!==0?colorScale(counts):darkMode?'var(--darker-grey)':'#fff',orientation:['diagonal']}));});}),this.props.currentMap===str.WORLD_MAP&&this.state.showTransmissions&&transmissions.filter(function(trans){return parseDate(trans.date)<=parseDate(date);}).map(function(trans,i){return/*#__PURE__*/React.createElement(Line,{keys:\"transmission-\".concat(i),from:coord[trans.from].split(',').map(function(c){return parseFloat(c);}),to:coord[trans.to].split(',').map(function(c){return parseFloat(c);}),stroke:darkMode?'rgba(222,73,104,0.9)':'rgba(222, 73, 104, 0.5)',strokeWidth:1,strokeLinecap:\"round\",style:{pointerEvents:'none'}});}),[str.WORLD_MAP,str.CHINA_MAP1,str.CHINA_MAP2].includes(this.props.currentMap)&&/*#__PURE__*/React.createElement(Marker,{key:'wuhan',coordinates:[114.2,30.3]},/*#__PURE__*/React.createElement(\"g\",{fill:\"none\",stroke:\"var(--primary-color-4)\",strokeWidth:\"2\",pointerEvents:\"none\",strokeLinecap:\"round\",strokeLinejoin:\"round\",transform:\"translate(-12, -24)\"},/*#__PURE__*/React.createElement(\"circle\",{cx:\"12\",cy:\"10\",r:\"3\"}),/*#__PURE__*/React.createElement(\"path\",{d:\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\"}))),(this.props.currentMap===str.WORLD_MAP||this.props.currentMap===str.JAPAN_MAP)&&/*#__PURE__*/React.createElement(Marker,{key:'diamond-princess',coordinates:[139.6,35.4]},/*#__PURE__*/React.createElement(FaShip,{size:this.props.currentMap===str.WORLD_MAP?18:36,color:colorScale(cruiseCounts),className:\"map-ship\",\"data-tip\":\"\".concat(lang==='zh'?str.DIAMOND_PRINCESS_ZH:cruiseData.ENGLISH,\" <span class=\\\"plot-tooltip-bold\\\">\").concat(cruiseCounts,\"</span>\"),style:{stroke:cruiseStrokeColor,visibility:cruiseCounts>0?'visible':'hidden',strokeWidth:currentRegion[currentRegion.length-1]===str.DIAMOND_PRINCESS_ZH?30:0},onClick:function onClick(){return _this3.props.regionToggle([str.INTL_CONVEYANCE_ZH,str.DIAMOND_PRINCESS_ZH]);}})))));}}]);return Map;}(Component);export default Map;","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/components/Map.js"],"names":["React","Component","Fragment","ComposableMap","ZoomableGroup","Geographies","Geography","Marker","Line","scaleSequential","scaleLog","scaleLinear","interpolateMagma","PatternLines","isMobile","isIPad13","TinyColor","FaShip","Toggle","maps","us_map","transmissions","coord","getDataFromRegion","parseDate","str","i18n","Map","state","loaded","cursor","clicked","showTransmissions","usState","handleGeographyClick","region","props","regionToggle","split","onZoomEnd","event","handleMapZoomChange","zoom","getConfig","config","defaultConfig","map","d","parseInt","getColorScale","isUsState","data","currentRegion","scale","metric","darkMode","currentMap","currentScale","maxCount","stateData","slice","Math","max","Object","keys","filter","x","includes","county","values","mapScale","domain","clamp","colorConvert","colorScale","WORLD_MAP","color","toRgbString","desaturate","greyedColor","setAlpha","getLuminance","darken","lighten","getStrokeColor","counts","tinyColor","isDark","invert","prevProps","prevState","setState","setTimeout","tooltipRebuild","US_MAP2","TRANSMISSION","date","lang","mapZoom","center","parseFloat","projection","cruiseData","INTL_CONVEYANCE_ZH","DIAMOND_PRINCESS_ZH","cruiseCounts","cruiseStrokeColor","greyStrokeColor","TRANSMISSIONS","rotate","parallels","e","m","y","abs","US_MAP","geographies","geo","properties","REGION","backgroundMap","name","name_key","isCurrentCountryOrState","CHINESE_NAME","length","rsmKey","default","fill","stroke","strokeWidth","hover","pressed","filename","i","isCurrentRegion","zh","parent_key","isParentRegion","MAINLAND_CHINA_ZH","strokeColor","opacity","trans","from","c","to","pointerEvents","CHINA_MAP1","CHINA_MAP2","JAPAN_MAP","ENGLISH","visibility"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport { ComposableMap, ZoomableGroup, Geographies, Geography, Marker, Line } from 'react-simple-maps'\r\nimport { scaleSequential, scaleLog, scaleLinear } from 'd3-scale'\r\nimport { interpolateMagma } from 'd3-scale-chromatic'\r\nimport { PatternLines } from '@vx/pattern'\r\nimport { isMobile, isIPad13 } from 'react-device-detect'\r\nimport { TinyColor } from '@ctrl/tinycolor'\r\nimport { FaShip } from 'react-icons/fa'\r\nimport Toggle from 'react-toggle'\r\nimport 'react-toggle/style.css'\r\nimport maps from '../data/maps.yml'\r\nimport us_map from '../data/us_map.yml'\r\nimport transmissions from '../data/transmissions.yml'\r\nimport coord from '../data/transmissions_coord.yml'\r\nimport { getDataFromRegion, parseDate } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nclass Map extends Component {\r\n    state = {\r\n        loaded: false,\r\n        cursor: [ 0, 0 ],\r\n        clicked: false,\r\n        showTransmissions: false,\r\n        usState: null\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.currentMap !== prevProps.currentMap || this.state.usState !== prevState.usState) {\r\n            this.setState({ loaded: false })\r\n            setTimeout(() => {\r\n                this.props.tooltipRebuild()\r\n            }, 100)\r\n        }\r\n\r\n        if (this.props.currentMap === str.US_MAP2) {\r\n            const usState = this.props.currentRegion[1]\r\n            if (usState !== this.state.usState) {\r\n                this.setState({ usState })\r\n            }\r\n        }\r\n    }\r\n\r\n    handleGeographyClick = (region) => () => {\r\n        if (!this.state.clicked || region == null) return\r\n\r\n        this.props.regionToggle(region.split('.'))\r\n    }\r\n\r\n    onZoomEnd = (event, state) => {\r\n        this.props.handleMapZoomChange(state.zoom)\r\n    }\r\n\r\n    getConfig = (config, defaultConfig) =>\r\n        config != null ? config.split(',').map((d) => parseInt(d, 10)) : defaultConfig\r\n\r\n    getColorScale = (isUsState) => {\r\n        const { data, currentRegion, scale, metric, darkMode } = this.props\r\n        const currentMap = maps[this.props.currentMap]\r\n\r\n        const currentScale = scale === 'linear' ? scaleLinear : scaleLog\r\n\r\n        let maxCount = currentMap[`maxScale_${metric}`]\r\n        if (isUsState && metric === 'confirmedCount') {\r\n            const stateData = getDataFromRegion(data, currentRegion.slice(0, 2))\r\n            maxCount = Math.max(\r\n                ...Object.keys(stateData)\r\n                    .filter((x) => ![ 'confirmedCount', 'curedCount', 'deadCount', 'ENGLISH' ].includes(x))\r\n                    .map((county) => Math.max(...Object.values(stateData[county][metric])))\r\n            )\r\n        }\r\n        const mapScale = currentScale().domain([ 1, maxCount ]).clamp(true)\r\n        const colorConvert = (x) => (darkMode ? x * 0.95 + 0.05 : 0.95 - x * 0.95)\r\n        const colorScale = scaleSequential((d) => {\r\n            if (!this.state.showTransmissions || this.props.currentMap !== str.WORLD_MAP) {\r\n                const color = new TinyColor(interpolateMagma(colorConvert(mapScale(d))))\r\n                if (!darkMode) return color.toRgbString()\r\n\r\n                return color.desaturate(10).toRgbString()\r\n            } else {\r\n                const greyedColor = new TinyColor(interpolateMagma(colorConvert(mapScale(d)))).desaturate(100)\r\n                if (!darkMode) return greyedColor.setAlpha(0.6).toRgbString()\r\n\r\n                // make the colors distinguishable from dark background\r\n                return greyedColor.getLuminance() < 0.09\r\n                    ? greyedColor.darken(5).setAlpha(0.9).toRgbString()\r\n                    : greyedColor.lighten(5).setAlpha(0.9).toRgbString()\r\n            }\r\n        })\r\n\r\n        return { colorScale, mapScale }\r\n    }\r\n\r\n    getStrokeColor = (counts, isUsState) => {\r\n        const { colorScale, mapScale } = this.getColorScale(isUsState)\r\n        const { darkMode } = this.props\r\n        const tinyColor = new TinyColor(colorScale(counts))\r\n\r\n        if (!darkMode) {\r\n            return tinyColor.isDark()\r\n                ? colorScale(mapScale.invert(mapScale(counts) - 0.6))\r\n                : colorScale(mapScale.invert(mapScale(counts) + 0.3))\r\n        } else {\r\n            return tinyColor.isDark()\r\n                ? colorScale(mapScale.invert(mapScale(counts) + 0.5))\r\n                : colorScale(mapScale.invert(mapScale(counts) - 0.5))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.currentMap === str.TRANSMISSION) return <div />\r\n\r\n        const currentMap = maps[this.props.currentMap]\r\n        const { data, metric, date, lang, currentRegion, mapZoom, darkMode } = this.props\r\n\r\n        const isUsState =\r\n            this.props.currentMap === str.US_MAP2 && this.state.usState != null && this.state.usState in us_map\r\n        const center = isUsState\r\n            ? us_map[this.state.usState].center.split(',').map((d) => parseFloat(d))\r\n            : currentMap.center.split(',').map((d) => parseFloat(d))\r\n        const scale = isUsState ? us_map[this.state.usState].scale : currentMap.scale\r\n        const projection = isUsState ? 'geoMercator' : currentMap.projection\r\n\r\n        const { colorScale } = this.getColorScale(isUsState)\r\n        const cruiseData = getDataFromRegion(data, [ str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH ])\r\n        const cruiseCounts = cruiseData[metric][date] ? cruiseData[metric][date] : 0\r\n\r\n        const cruiseStrokeColor = this.getStrokeColor(cruiseCounts, isUsState)\r\n        const greyStrokeColor = darkMode ? 'var(--primary-color-10)' : 'var(--grey)'\r\n\r\n        return (\r\n            <Fragment>\r\n                {this.props.currentMap === str.WORLD_MAP && (\r\n                    <div className=\"map-transmission-toggle-wrap\">\r\n                        <Toggle\r\n                            className=\"map-transmission-toggle\"\r\n                            defaultChecked={this.state.showTransmissions}\r\n                            onChange={() => this.setState({ showTransmissions: !this.state.showTransmissions })}\r\n                            icons={false}\r\n                        />\r\n                        <span>{i18n.TRANSMISSIONS[this.props.lang]}</span>\r\n                    </div>\r\n                )}\r\n                <ComposableMap\r\n                    projection={projection}\r\n                    projectionConfig={{\r\n                        scale: scale,\r\n                        rotate: currentMap.rotate\r\n                            ? currentMap.rotate.split(',').map((x) => parseInt(x, 10))\r\n                            : [ 0, 0, 0 ],\r\n                        parallels: [ 0, 0 ]\r\n                    }}\r\n                >\r\n                    <PatternLines\r\n                        id=\"lines\"\r\n                        height={6}\r\n                        width={6}\r\n                        stroke={greyStrokeColor}\r\n                        strokeWidth={1}\r\n                        background={darkMode ? 'var(--darker-grey)' : '#fff'}\r\n                        orientation={[ 'diagonal' ]}\r\n                    />\r\n                    <PatternLines\r\n                        id=\"background-lines\"\r\n                        height={6}\r\n                        width={6}\r\n                        stroke={darkMode ? '#333' : '#ddd'}\r\n                        strokeWidth={1}\r\n                        background={darkMode ? 'var(--darker-grey)' : '#fff'}\r\n                        orientation={[ 'diagonal' ]}\r\n                    />\r\n                    <ZoomableGroup\r\n                        zoom={mapZoom}\r\n                        onZoomEnd={this.onZoomEnd}\r\n                        onMoveStart={(e, m) => this.setState({ cursor: [ m.x, m.y ], clicked: false })}\r\n                        onMoveEnd={(e, m) => {\r\n                            // click on desktop\r\n                            if (Math.abs(m.x - this.state.cursor[0]) < 1 && Math.abs(m.y - this.state.cursor[1]) < 1)\r\n                                this.setState({ clicked: true })\r\n                        }}\r\n                        onTouchStart={\r\n                            // click on touch screens\r\n                            isMobile || isIPad13 ? () => this.setState({ clicked: true }) : null\r\n                        }\r\n                        center={center}\r\n                        minZoom={0.2}\r\n                        maxZoom={5}\r\n                        disableZooming={isMobile || isIPad13}\r\n                        disablePanning={isMobile || isIPad13}\r\n                    >\r\n                        {![ str.WORLD_MAP, str.US_MAP ].includes(this.props.currentMap) && (\r\n                            <Geographies\r\n                                geography={`maps/${this.props.currentMap !== str.US_MAP2\r\n                                    ? 'world-50m'\r\n                                    : 'states-10m'}.json`}\r\n                                onMouseEnter={() => {\r\n                                    if (!this.state.loaded) {\r\n                                        this.setState({ loaded: true })\r\n                                        this.props.tooltipRebuild()\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {({ geographies }) =>\r\n                                    geographies.map((geo) => {\r\n                                        let counts = 0\r\n                                        if (geo.properties.REGION != null) {\r\n                                            const region = getDataFromRegion(data, geo.properties.REGION.split('.'))\r\n                                            if (region && region[metric] && region[metric][date])\r\n                                                counts = region[metric][date]\r\n                                        }\r\n                                        const backgroundMap =\r\n                                            this.props.currentMap !== str.US_MAP2 ? str.WORLD_MAP : str.US_MAP\r\n                                        const name = geo.properties[maps[backgroundMap].name_key[lang]]\r\n                                        const isCurrentCountryOrState =\r\n                                            backgroundMap === str.WORLD_MAP\r\n                                                ? geo.properties.CHINESE_NAME === currentRegion[0]\r\n                                                : geo.properties.CHINESE_NAME === currentRegion[1]\r\n                                        if (isCurrentCountryOrState) return <div />\r\n                                        if (backgroundMap === str.US_MAP && currentRegion.length === 1) return <div />\r\n                                        return (\r\n                                            <Geography\r\n                                                className=\"map-geography\"\r\n                                                key={geo.rsmKey}\r\n                                                geography={geo}\r\n                                                data-tip={`${name} <span class=\"plot-tooltip-bold\">${counts}</span>`}\r\n                                                style={{\r\n                                                    default: {\r\n                                                        fill: darkMode ? 'var(--darker-grey)' : '#fff',\r\n                                                        stroke: darkMode ? '#333' : '#ddd',\r\n                                                        strokeWidth: 2\r\n                                                    },\r\n                                                    hover: {\r\n                                                        fill: `url(\"#background-lines\") ${darkMode ? '#333' : '#ddd'}`,\r\n                                                        stroke: darkMode ? '#333' : '#ddd',\r\n                                                        strokeWidth: 2,\r\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\r\n                                                    },\r\n                                                    pressed: {\r\n                                                        fill: `url(\"#background-lines\") ${darkMode ? '#333' : '#ddd'}`,\r\n                                                        stroke: darkMode ? '#333' : '#ddd',\r\n                                                        strokeWidth: 2,\r\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\r\n                                                    }\r\n                                                }}\r\n                                                onClick={this.handleGeographyClick(geo.properties.REGION)}\r\n                                            />\r\n                                        )\r\n                                    })}\r\n                            </Geographies>\r\n                        )}\r\n                        <Geographies\r\n                            geography={`maps/${currentMap.filename}`}\r\n                            onMouseEnter={() => {\r\n                                if (!this.state.loaded) {\r\n                                    this.setState({ loaded: true })\r\n                                    this.props.tooltipRebuild()\r\n                                }\r\n                            }}\r\n                        >\r\n                            {({ geographies }) =>\r\n                                geographies.map((geo, i) => {\r\n                                    let counts = 0\r\n                                    if (geo.properties.REGION != null) {\r\n                                        const region = getDataFromRegion(data, geo.properties.REGION.split('.'))\r\n                                        if (region && region[metric] && region[metric][date])\r\n                                            counts = region[metric][date]\r\n                                    }\r\n                                    const name = geo.properties[currentMap.name_key[lang]]\r\n                                    let isCurrentRegion =\r\n                                        geo.properties[currentMap.name_key.zh] ===\r\n                                        currentRegion[currentRegion.length - 1]\r\n                                    if (currentMap.parent_key)\r\n                                        isCurrentRegion =\r\n                                            isCurrentRegion &&\r\n                                            geo.properties[currentMap.parent_key] ===\r\n                                                currentRegion[currentRegion.length - 2]\r\n\r\n                                    // highlight all cities in the province\r\n                                    let isParentRegion = false\r\n                                    if (currentMap.parent_key) {\r\n                                        isParentRegion =\r\n                                            geo.properties[currentMap.parent_key] ===\r\n                                            currentRegion[currentRegion.length - 1]\r\n                                        if (currentRegion.length >= 3)\r\n                                            isParentRegion =\r\n                                                isParentRegion ||\r\n                                                geo.properties[currentMap.parent_key] ===\r\n                                                    currentRegion[currentRegion.length - 2]\r\n                                        if (\r\n                                            currentRegion.length === 1 ||\r\n                                            currentRegion[currentRegion.length - 1] === str.MAINLAND_CHINA_ZH\r\n                                        )\r\n                                            isParentRegion = true\r\n                                        isParentRegion = isParentRegion || isCurrentRegion\r\n                                    } else {\r\n                                        isParentRegion = true\r\n                                    }\r\n\r\n                                    const strokeColor =\r\n                                        counts === 0 ? greyStrokeColor : this.getStrokeColor(counts, isUsState)\r\n\r\n                                    // US map\r\n                                    if (this.props.currentMap === str.US_MAP2 && !isParentRegion) return <div />\r\n\r\n                                    return (\r\n                                        <Fragment key={`fragment-${geo.rsmKey}`}>\r\n                                            <Geography\r\n                                                key={geo.rsmKey}\r\n                                                className=\"map-geography\"\r\n                                                geography={geo}\r\n                                                data-tip={`${name} <span class=\"plot-tooltip-bold\">${counts}</span>`}\r\n                                                style={{\r\n                                                    default: {\r\n                                                        fill: isCurrentRegion\r\n                                                            ? `url(\"#highlightLines-${i}\") ${greyStrokeColor}`\r\n                                                            : counts > 0 ? colorScale(counts) : 'url(\"#lines\")',\r\n                                                        stroke: strokeColor,\r\n                                                        strokeWidth: isCurrentRegion ? 1 : 0,\r\n                                                        opacity: isParentRegion ? 1 : 0.2\r\n                                                    },\r\n                                                    hover: {\r\n                                                        fill: `url(\"#highlightLines-${i}\") ${greyStrokeColor}`,\r\n                                                        strokeWidth: 1,\r\n                                                        stroke: strokeColor,\r\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\r\n                                                    },\r\n                                                    pressed: {\r\n                                                        fill: `url(\"#highlightLines-${i}\") ${greyStrokeColor}`,\r\n                                                        strokeWidth: 1,\r\n                                                        stroke: strokeColor,\r\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\r\n                                                    }\r\n                                                }}\r\n                                                onClick={this.handleGeographyClick(geo.properties.REGION)}\r\n                                            />\r\n                                            <PatternLines\r\n                                                id={`highlightLines-${i}`}\r\n                                                height={6}\r\n                                                width={6}\r\n                                                stroke={strokeColor}\r\n                                                strokeWidth={1}\r\n                                                background={\r\n                                                    counts !== 0 ? (\r\n                                                        colorScale(counts)\r\n                                                    ) : darkMode ? (\r\n                                                        'var(--darker-grey)'\r\n                                                    ) : (\r\n                                                        '#fff'\r\n                                                    )\r\n                                                }\r\n                                                orientation={[ 'diagonal' ]}\r\n                                            />\r\n                                        </Fragment>\r\n                                    )\r\n                                })}\r\n                        </Geographies>\r\n                        {this.props.currentMap === str.WORLD_MAP &&\r\n                            this.state.showTransmissions &&\r\n                            transmissions\r\n                                .filter((trans) => parseDate(trans.date) <= parseDate(date))\r\n                                .map((trans, i) => {\r\n                                    return (\r\n                                        <Line\r\n                                            keys={`transmission-${i}`}\r\n                                            from={coord[trans.from].split(',').map((c) => parseFloat(c))}\r\n                                            to={coord[trans.to].split(',').map((c) => parseFloat(c))}\r\n                                            stroke={darkMode ? 'rgba(222,73,104,0.9)' : 'rgba(222, 73, 104, 0.5)'}\r\n                                            strokeWidth={1}\r\n                                            strokeLinecap=\"round\"\r\n                                            style={{\r\n                                                pointerEvents: 'none'\r\n                                            }}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                        {[ str.WORLD_MAP, str.CHINA_MAP1, str.CHINA_MAP2 ].includes(this.props.currentMap) && (\r\n                            <Marker key={'wuhan'} coordinates={[ 114.2, 30.3 ]}>\r\n                                <g\r\n                                    fill=\"none\"\r\n                                    stroke=\"var(--primary-color-4)\"\r\n                                    strokeWidth=\"2\"\r\n                                    pointerEvents=\"none\"\r\n                                    strokeLinecap=\"round\"\r\n                                    strokeLinejoin=\"round\"\r\n                                    transform=\"translate(-12, -24)\"\r\n                                >\r\n                                    <circle cx=\"12\" cy=\"10\" r=\"3\" />\r\n                                    <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\r\n                                </g>\r\n                            </Marker>\r\n                        )}\r\n                        {(this.props.currentMap === str.WORLD_MAP || this.props.currentMap === str.JAPAN_MAP) && (\r\n                            <Marker key={'diamond-princess'} coordinates={[ 139.6, 35.4 ]}>\r\n                                <FaShip\r\n                                    size={this.props.currentMap === str.WORLD_MAP ? 18 : 36}\r\n                                    color={colorScale(cruiseCounts)}\r\n                                    className=\"map-ship\"\r\n                                    data-tip={`${lang === 'zh'\r\n                                        ? str.DIAMOND_PRINCESS_ZH\r\n                                        : cruiseData.ENGLISH} <span class=\"plot-tooltip-bold\">${cruiseCounts}</span>`}\r\n                                    style={{\r\n                                        stroke: cruiseStrokeColor,\r\n                                        visibility: cruiseCounts > 0 ? 'visible' : 'hidden',\r\n                                        strokeWidth:\r\n                                            currentRegion[currentRegion.length - 1] === str.DIAMOND_PRINCESS_ZH ? 30 : 0\r\n                                    }}\r\n                                    onClick={() =>\r\n                                        this.props.regionToggle([ str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH ])}\r\n                                />\r\n                            </Marker>\r\n                        )}\r\n                    </ZoomableGroup>\r\n                </ComposableMap>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map\r\n"]},"metadata":{},"sourceType":"module"}