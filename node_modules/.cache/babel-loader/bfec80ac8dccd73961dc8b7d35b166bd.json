{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMarkerId = void 0;\n\nvar _marker = require(\"./marker.const\");\n/**\n * @module Marker/helper\n * @description\n * Offers a series of methods to compute proper markers within a given context.\n */\n\n/**\n * This function is a key template builder to access MARKERS structure.\n * @param {string} size - string that indicates size of marker.\n * @param {string} highlighted - string that indicates highlight state of marker.\n * @returns {string} the key of the marker.\n * @memberof Marker/helper\n */\n\n\nfunction _markerKeyBuilder(size, highlighted) {\n  return \"MARKER_\".concat(size).concat(highlighted);\n}\n/**\n * This functions returns the proper marker size given the inputs that describe the scenario\n * where the marker is to be applied.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {number} mMax - a derived value from the max zoom config.\n * @param {number} lMax - a derived value from the min zoom config.\n * @returns {string} the size.\n * @memberof Marker/helper\n */\n\n\nfunction _getMarkerSize(transform, mMax, lMax) {\n  if (transform < mMax) {\n    return _marker.SIZES.S;\n  } else if (transform >= mMax && transform < lMax) {\n    return _marker.SIZES.M;\n  } else {\n    return _marker.SIZES.L;\n  }\n}\n/**\n * This function holds logic to retrieve the appropriate marker id that reflects the input\n * parameters, markers can vary with highlight and transform value.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @returns {string} the id of the result marker.\n * @memberof Marker/helper\n */\n\n\nfunction _computeMarkerId(highlight, transform, _ref) {\n  var maxZoom = _ref.maxZoom;\n  var mMax = maxZoom / 4;\n  var lMax = maxZoom / 2;\n\n  var size = _getMarkerSize(transform, mMax, lMax);\n\n  var highlighted = highlight ? _marker.HIGHLIGHTED : \"\";\n\n  var markerKey = _markerKeyBuilder(size, highlighted);\n\n  return _marker.MARKERS[markerKey];\n}\n/**\n * This function memoize results for _computeMarkerId\n * since many of the times user will be playing around with the same zoom\n * factor, we can take advantage of this and cache the results for a\n * given combination of highlight state, zoom transform value and maxZoom config.\n * @returns{Function} memoize wrapper to the _computeMarkerId operation.\n * @memberof Marker/helper\n */\n\n\nfunction _memoizedComputeMarkerId() {\n  var cache = {};\n  return function (highlight, transform, _ref2) {\n    var maxZoom = _ref2.maxZoom;\n    var cacheKey = \"\".concat(highlight, \";\").concat(transform, \";\").concat(maxZoom);\n\n    if (cache[cacheKey]) {\n      return cache[cacheKey];\n    }\n\n    var markerId = _computeMarkerId(highlight, transform, {\n      maxZoom: maxZoom\n    });\n\n    cache[cacheKey] = markerId;\n    return markerId;\n  };\n}\n/**\n * Memoized reference for _memoizedComputeMarkerId exposed\n * as getter for sake of readability.\n * Gets proper marker id given the highlight state and the zoom\n * transform.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @param {Object} config.maxZoom - max zoom that can be performed against the graph.\n * @memberof Marker/helper\n */\n\n\nvar getMarkerId = _memoizedComputeMarkerId();\n\nexports.getMarkerId = getMarkerId;","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/node_modules/react-d3-graph/lib/components/marker/marker.helper.js"],"names":["Object","defineProperty","exports","value","getMarkerId","_marker","require","_markerKeyBuilder","size","highlighted","concat","_getMarkerSize","transform","mMax","lMax","SIZES","S","M","L","_computeMarkerId","highlight","_ref","maxZoom","HIGHLIGHTED","markerKey","MARKERS","_memoizedComputeMarkerId","cache","_ref2","cacheKey","markerId"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAArB;AAEA;;;;;;AAMA;;;;;;;;;AAOA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,WAAjC,EAA8C;AAC5C,SAAO,UAAUC,MAAV,CAAiBF,IAAjB,EAAuBE,MAAvB,CAA8BD,WAA9B,CAAP;AACD;AACD;;;;;;;;;;;AAWA,SAASE,cAAT,CAAwBC,SAAxB,EAAmCC,IAAnC,EAAyCC,IAAzC,EAA+C;AAC7C,MAAIF,SAAS,GAAGC,IAAhB,EAAsB;AACpB,WAAOR,OAAO,CAACU,KAAR,CAAcC,CAArB;AACD,GAFD,MAEO,IAAIJ,SAAS,IAAIC,IAAb,IAAqBD,SAAS,GAAGE,IAArC,EAA2C;AAChD,WAAOT,OAAO,CAACU,KAAR,CAAcE,CAArB;AACD,GAFM,MAEA;AACL,WAAOZ,OAAO,CAACU,KAAR,CAAcG,CAArB;AACD;AACF;AACD;;;;;;;;;;;AAWA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCR,SAArC,EAAgDS,IAAhD,EAAsD;AACpD,MAAIC,OAAO,GAAGD,IAAI,CAACC,OAAnB;AACA,MAAIT,IAAI,GAAGS,OAAO,GAAG,CAArB;AACA,MAAIR,IAAI,GAAGQ,OAAO,GAAG,CAArB;;AAEA,MAAId,IAAI,GAAGG,cAAc,CAACC,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,CAAzB;;AAEA,MAAIL,WAAW,GAAGW,SAAS,GAAGf,OAAO,CAACkB,WAAX,GAAyB,EAApD;;AAEA,MAAIC,SAAS,GAAGjB,iBAAiB,CAACC,IAAD,EAAOC,WAAP,CAAjC;;AAEA,SAAOJ,OAAO,CAACoB,OAAR,CAAgBD,SAAhB,CAAP;AACD;AACD;;;;;;;;;;AAUA,SAASE,wBAAT,GAAoC;AAClC,MAAIC,KAAK,GAAG,EAAZ;AACA,SAAO,UAAUP,SAAV,EAAqBR,SAArB,EAAgCgB,KAAhC,EAAuC;AAC5C,QAAIN,OAAO,GAAGM,KAAK,CAACN,OAApB;AACA,QAAIO,QAAQ,GAAG,GAAGnB,MAAH,CAAUU,SAAV,EAAqB,GAArB,EAA0BV,MAA1B,CAAiCE,SAAjC,EAA4C,GAA5C,EAAiDF,MAAjD,CAAwDY,OAAxD,CAAf;;AAEA,QAAIK,KAAK,CAACE,QAAD,CAAT,EAAqB;AACnB,aAAOF,KAAK,CAACE,QAAD,CAAZ;AACD;;AAED,QAAIC,QAAQ,GAAGX,gBAAgB,CAACC,SAAD,EAAYR,SAAZ,EAAuB;AACpDU,MAAAA,OAAO,EAAEA;AAD2C,KAAvB,CAA/B;;AAIAK,IAAAA,KAAK,CAACE,QAAD,CAAL,GAAkBC,QAAlB;AACA,WAAOA,QAAP;AACD,GAdD;AAeD;AACD;;;;;;;;;;;;;AAaA,IAAI1B,WAAW,GAAGsB,wBAAwB,EAA1C;;AAEAxB,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMarkerId = void 0;\n\nvar _marker = require(\"./marker.const\");\n\n/**\n * @module Marker/helper\n * @description\n * Offers a series of methods to compute proper markers within a given context.\n */\n\n/**\n * This function is a key template builder to access MARKERS structure.\n * @param {string} size - string that indicates size of marker.\n * @param {string} highlighted - string that indicates highlight state of marker.\n * @returns {string} the key of the marker.\n * @memberof Marker/helper\n */\nfunction _markerKeyBuilder(size, highlighted) {\n  return \"MARKER_\".concat(size).concat(highlighted);\n}\n/**\n * This functions returns the proper marker size given the inputs that describe the scenario\n * where the marker is to be applied.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {number} mMax - a derived value from the max zoom config.\n * @param {number} lMax - a derived value from the min zoom config.\n * @returns {string} the size.\n * @memberof Marker/helper\n */\n\n\nfunction _getMarkerSize(transform, mMax, lMax) {\n  if (transform < mMax) {\n    return _marker.SIZES.S;\n  } else if (transform >= mMax && transform < lMax) {\n    return _marker.SIZES.M;\n  } else {\n    return _marker.SIZES.L;\n  }\n}\n/**\n * This function holds logic to retrieve the appropriate marker id that reflects the input\n * parameters, markers can vary with highlight and transform value.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @returns {string} the id of the result marker.\n * @memberof Marker/helper\n */\n\n\nfunction _computeMarkerId(highlight, transform, _ref) {\n  var maxZoom = _ref.maxZoom;\n  var mMax = maxZoom / 4;\n  var lMax = maxZoom / 2;\n\n  var size = _getMarkerSize(transform, mMax, lMax);\n\n  var highlighted = highlight ? _marker.HIGHLIGHTED : \"\";\n\n  var markerKey = _markerKeyBuilder(size, highlighted);\n\n  return _marker.MARKERS[markerKey];\n}\n/**\n * This function memoize results for _computeMarkerId\n * since many of the times user will be playing around with the same zoom\n * factor, we can take advantage of this and cache the results for a\n * given combination of highlight state, zoom transform value and maxZoom config.\n * @returns{Function} memoize wrapper to the _computeMarkerId operation.\n * @memberof Marker/helper\n */\n\n\nfunction _memoizedComputeMarkerId() {\n  var cache = {};\n  return function (highlight, transform, _ref2) {\n    var maxZoom = _ref2.maxZoom;\n    var cacheKey = \"\".concat(highlight, \";\").concat(transform, \";\").concat(maxZoom);\n\n    if (cache[cacheKey]) {\n      return cache[cacheKey];\n    }\n\n    var markerId = _computeMarkerId(highlight, transform, {\n      maxZoom: maxZoom\n    });\n\n    cache[cacheKey] = markerId;\n    return markerId;\n  };\n}\n/**\n * Memoized reference for _memoizedComputeMarkerId exposed\n * as getter for sake of readability.\n * Gets proper marker id given the highlight state and the zoom\n * transform.\n * @param {boolean} highlight - tells us whether or not some element (link or node) is highlighted.\n * @param {number} transform - the delta zoom value to calculate resize transformations.\n * @param {Object} config - the graph config object.\n * @param {Object} config.maxZoom - max zoom that can be performed against the graph.\n * @memberof Marker/helper\n */\n\n\nvar getMarkerId = _memoizedComputeMarkerId();\n\nexports.getMarkerId = getMarkerId;"]},"metadata":{},"sourceType":"script"}