{"ast":null,"code":"import _pt from \"prop-types\";\nimport React from 'react';\nimport cx from 'classnames';\nimport Pattern from './Pattern';\nexport default function PatternPath(_ref) {\n  var id = _ref.id,\n      width = _ref.width,\n      height = _ref.height,\n      path = _ref.path,\n      _ref$fill = _ref.fill,\n      fill = _ref$fill === void 0 ? 'transparent' : _ref$fill,\n      stroke = _ref.stroke,\n      strokeWidth = _ref.strokeWidth,\n      strokeDasharray = _ref.strokeDasharray,\n      _ref$strokeLinecap = _ref.strokeLinecap,\n      strokeLinecap = _ref$strokeLinecap === void 0 ? 'square' : _ref$strokeLinecap,\n      _ref$shapeRendering = _ref.shapeRendering,\n      shapeRendering = _ref$shapeRendering === void 0 ? 'auto' : _ref$shapeRendering,\n      background = _ref.background,\n      className = _ref.className;\n  return React.createElement(Pattern, {\n    id: id,\n    width: width,\n    height: height\n  }, !!background && React.createElement(\"rect\", {\n    width: width,\n    height: height,\n    fill: background\n  }), React.createElement(\"path\", {\n    className: cx('vx-pattern-path', className),\n    d: path,\n    fill: fill,\n    stroke: stroke,\n    strokeWidth: strokeWidth,\n    strokeDasharray: strokeDasharray,\n    strokeLinecap: strokeLinecap,\n    shapeRendering: shapeRendering\n  }));\n}\nPatternPath.propTypes = {\n  id: _pt.string.isRequired,\n  width: _pt.number.isRequired,\n  height: _pt.number.isRequired,\n  path: _pt.string,\n  fill: _pt.string,\n  className: _pt.string,\n  background: _pt.string,\n  stroke: _pt.string,\n  strokeWidth: _pt.oneOfType([_pt.number, _pt.string]),\n  strokeDasharray: _pt.oneOfType([_pt.string, _pt.number]),\n  strokeLinecap: _pt.oneOf(['square', 'butt', 'round', 'inherit']),\n  shapeRendering: _pt.oneOfType([_pt.string, _pt.number])\n};","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/node_modules/@vx/pattern/esm/patterns/Path.js"],"names":["_pt","React","cx","Pattern","PatternPath","_ref","id","width","height","path","_ref$fill","fill","stroke","strokeWidth","strokeDasharray","_ref$strokeLinecap","strokeLinecap","_ref$shapeRendering","shapeRendering","background","className","createElement","d","propTypes","string","isRequired","number","oneOfType","oneOf"],"mappings":"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","sourcesContent":["import _pt from \"prop-types\";\nimport React from 'react';\nimport cx from 'classnames';\nimport Pattern from './Pattern';\nexport default function PatternPath(_ref) {\n  var id = _ref.id,\n      width = _ref.width,\n      height = _ref.height,\n      path = _ref.path,\n      _ref$fill = _ref.fill,\n      fill = _ref$fill === void 0 ? 'transparent' : _ref$fill,\n      stroke = _ref.stroke,\n      strokeWidth = _ref.strokeWidth,\n      strokeDasharray = _ref.strokeDasharray,\n      _ref$strokeLinecap = _ref.strokeLinecap,\n      strokeLinecap = _ref$strokeLinecap === void 0 ? 'square' : _ref$strokeLinecap,\n      _ref$shapeRendering = _ref.shapeRendering,\n      shapeRendering = _ref$shapeRendering === void 0 ? 'auto' : _ref$shapeRendering,\n      background = _ref.background,\n      className = _ref.className;\n  return React.createElement(Pattern, {\n    id: id,\n    width: width,\n    height: height\n  }, !!background && React.createElement(\"rect\", {\n    width: width,\n    height: height,\n    fill: background\n  }), React.createElement(\"path\", {\n    className: cx('vx-pattern-path', className),\n    d: path,\n    fill: fill,\n    stroke: stroke,\n    strokeWidth: strokeWidth,\n    strokeDasharray: strokeDasharray,\n    strokeLinecap: strokeLinecap,\n    shapeRendering: shapeRendering\n  }));\n}\nPatternPath.propTypes = {\n  id: _pt.string.isRequired,\n  width: _pt.number.isRequired,\n  height: _pt.number.isRequired,\n  path: _pt.string,\n  fill: _pt.string,\n  className: _pt.string,\n  background: _pt.string,\n  stroke: _pt.string,\n  strokeWidth: _pt.oneOfType([_pt.number, _pt.string]),\n  strokeDasharray: _pt.oneOfType([_pt.string, _pt.number]),\n  strokeLinecap: _pt.oneOf(['square', 'butt', 'round', 'inherit']),\n  shapeRendering: _pt.oneOfType([_pt.string, _pt.number])\n};"]},"metadata":{},"sourceType":"module"}