{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\src\\\\components\\\\App_corona.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport ReactTooltip from 'react-tooltip';\nimport { AiOutlineFullscreen, AiOutlineFullscreenExit } from 'react-icons/ai';\nimport Helmet from 'react-helmet';\nimport Measure from 'react-measure';\nimport format from 'date-fns/format';\nimport './App.css';\nimport Map from './Map';\nimport MapNavBar from './MapNavBar';\nimport DateSlider from './DateSlider';\nimport AnimationController from './AnimationController';\nimport MainCounts from './MainCounts';\nimport Plot from './Plot';\nimport Tree from './Tree';\nimport NavBar from './NavBar';\nimport Loading from './Loading';\nimport Region from './Region';\nimport TransmissionNetwork from './TransmissionNetwork';\nimport { ReactComponent as Icon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../covid19.svg\";\nimport i18n from '../data/i18n.yml';\nimport us_map from '../data/us_map.yml';\nimport * as str from '../utils/strings';\nimport { updateDarkMode } from '../utils/utils';\nimport { mapText } from '../utils/map_text';\nconst defaultState = {\n  currentMap: 'WORLD',\n  metric: 'confirmedCount',\n  currentRegion: [str.GLOBAL_ZH],\n  playing: false,\n  scale: 'linear',\n  mapZoom: 1,\n  fullMap: false,\n  fullPlot: false\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      startDate: '2020-01-24',\n      endDate: '2020-02-14',\n      date: '2020-02-14',\n      tempDate: '2020-02-14',\n      plotDates: ['2020-01-24', '2020-02-14'],\n      data: null,\n      dataLoaded: false,\n      lang: 'en',\n      darkMode: false,\n      mapDimensions: {\n        width: -1,\n        height: -1\n      },\n      fullDimensions: {\n        width: -1,\n        height: -1\n      },\n      plotType: 'plot_basic',\n      ...defaultState\n    };\n\n    this.fetchData = () => fetch('https://raw.githubusercontent.com/stevenliuyi/covid19/master/public/data/all_minified.json').then(res => res.json()).then(res => {\n      const latest = Object.keys(res[str.GLOBAL_ZH].confirmedCount).pop();\n      this.setState({\n        data: res,\n        dataLoaded: true,\n        date: latest,\n        tempDate: latest,\n        endDate: latest,\n        plotDates: [this.state.plotDates[0], latest]\n      });\n      this.tooltipRebuild();\n    });\n\n    this.updateFullDimensions = () => {\n      const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n      const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n      if (height < 750 || width < 992) {\n        if (this.state.fullMap) this.setState({\n          fullMap: false\n        });\n        if (this.state.fullPlot) this.setState({\n          fullPlot: false\n        });\n      }\n\n      this.setState({\n        fullDimensions: {\n          height: Math.min(height - 250, (width - 200) * 3 / 4),\n          width: Math.min((height - 250) * 4 / 3, width - 200)\n        }\n      });\n    };\n\n    this.reset = () => this.setState({ ...defaultState,\n      date: this.state.endDate,\n      tempDate: this.state.endDate,\n      plotDates: [this.state.startDate, this.state.endDate]\n    });\n\n    this.mapToggle = newMap => this.setState({\n      currentMap: newMap,\n      // do not reset map zoom when switching between two China maps\n      mapZoom: newMap === str.WORLD_MAP || this.state.currentMap === str.WORLD_MAP ? 1 : this.state.mapZoom\n    });\n\n    this.metricToggle = newMetric => this.setState({\n      metric: newMetric\n    });\n\n    this.regionToggle = (newRegion, mapChange = true) => {\n      const {\n        currentMap\n      } = this.state;\n      this.setState({\n        currentRegion: newRegion\n      });\n      if (!mapChange) return;\n      if (currentMap === str.TRANSMISSION) return;\n\n      if (newRegion[0] === str.CHINA_ZH) {\n        if (newRegion.length >= 4) {\n          this.mapToggle(str.CHINA_MAP2);\n        } else if (currentMap !== str.CHINA_MAP2) {\n          this.mapToggle(str.CHINA_MAP1);\n        }\n      } else if (newRegion[0] === str.US_ZH) {\n        if (newRegion.length >= 2 && newRegion[1] in us_map) {\n          this.mapToggle(str.US_MAP2);\n        } else {\n          this.mapToggle(str.US_MAP);\n        }\n      } else if (newRegion[0] === str.INTL_CONVEYANCE_ZH) {\n        this.mapToggle(str.JAPAN_MAP);\n      } else {\n        let map = Object.keys(mapText).find(x => mapText[x].regionName === newRegion[0]);\n        map = map != null ? map : str.WORLD_MAP;\n        if (map === str.WORLD_MAP && currentMap === str.EUROPE_MAP) map = str.EUROPE_MAP;\n        this.mapToggle(map);\n      }\n    };\n\n    this.playingToggle = () => this.setState({\n      playing: !this.state.playing\n    });\n\n    this.scaleToggle = newScale => this.setState({\n      scale: newScale\n    });\n\n    this.languageToggle = () => this.setState({\n      lang: this.state.lang === 'en' ? 'en' : 'en'\n    });\n\n    this.fullMapToggle = () => {\n      this.setState({\n        fullMap: !this.state.fullMap\n      });\n    };\n\n    this.fullPlotToggle = () => {\n      ReactTooltip.hide();\n      this.setState({\n        fullPlot: !this.state.fullPlot\n      });\n    };\n\n    this.darkModeToggle = () => {\n      updateDarkMode(!this.state.darkMode);\n      this.setState({\n        darkMode: !this.state.darkMode\n      });\n    };\n\n    this.handleMapZoomChange = newZoom => this.setState({\n      mapZoom: newZoom\n    });\n\n    this.handleDateChange = newDate => this.setState({\n      date: newDate,\n      tempDate: newDate\n    });\n\n    this.handleTempDateChange = newDates => {\n      const newDateStrings = newDates.map(x => format(x, 'yyyy-MM-dd'));\n\n      if (!this.state.fullPlot) {\n        this.setState({\n          tempDate: newDateStrings[0]\n        });\n      } else {\n        this.setState({\n          plotDates: newDateStrings\n        });\n      }\n    };\n\n    this.handlePlotTypeChange = newType => this.setState({\n      plotType: newType\n    });\n\n    this.tooltipRebuild = () => ReactTooltip.rebuild();\n  }\n\n  componentDidMount() {\n    updateDarkMode(this.state.darkMode);\n    this.fetchData();\n    this.updateFullDimensions();\n    window.addEventListener('resize', this.updateFullDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateFullDimensions);\n  }\n\n  render() {\n    const {\n      lang,\n      dataLoaded,\n      currentMap,\n      fullMap,\n      fullPlot,\n      darkMode\n    } = this.state;\n    const FullScreenIcon = fullMap ? AiOutlineFullscreenExit : AiOutlineFullscreen;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: `App ${darkMode ? 'dark' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Helmet, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }, i18n.COVID19[lang])), !dataLoaded ? /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }\n    }) : /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      className: `app-container ${fullMap ? 'map-full' : fullPlot ? 'plot-full' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: !fullMap ? 7 : 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"header-icon\",\n      style: {\n        opacity: dataLoaded ? 1 : 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"header-title\",\n      style: {\n        letterSpacing: lang === 'zh' ? '1px' : 'normal'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 41\n      }\n    }, i18n.COVID19[lang])), /*#__PURE__*/React.createElement(NavBar, Object.assign({}, this.state, {\n      scaleToggle: this.scaleToggle // languageToggle={this.languageToggle}\n      ,\n      darkModeToggle: this.darkModeToggle,\n      reset: this.reset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 37\n      }\n    })), !fullPlot && /*#__PURE__*/React.createElement(Measure, {\n      bounds: true,\n      onResize: contentRect => {\n        this.setState({\n          mapDimensions: contentRect.bounds\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 41\n      }\n    }, ({\n      measureRef\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      ref: measureRef,\n      className: \"map\",\n      style: {\n        height: !fullMap ? this.state.mapDimensions.width * 3 / 4 : this.state.fullDimensions.height,\n        width: !fullMap ? '100%' : this.state.fullDimensions.width\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 49\n      }\n    }, currentMap === str.TRANSMISSION && /*#__PURE__*/React.createElement(TransmissionNetwork, Object.assign({}, this.state, {\n      regionToggle: this.regionToggle,\n      tooltipRebuild: this.tooltipRebuild,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 57\n      }\n    })), currentMap !== str.TRANSMISSION && /*#__PURE__*/React.createElement(Map, Object.assign({}, this.state, {\n      handleMapZoomChange: this.handleMapZoomChange,\n      mapToggle: this.mapToggle,\n      regionToggle: this.regionToggle,\n      tooltipRebuild: this.tooltipRebuild,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map-full-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FullScreenIcon, {\n      size: fullMap ? 30 : 20,\n      onClick: this.fullMapToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 57\n      }\n    })))), /*#__PURE__*/React.createElement(MapNavBar, Object.assign({}, this.state, {\n      mapToggle: this.mapToggle,\n      metricToggle: this.metricToggle,\n      regionToggle: this.regionToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(DateSlider, Object.assign({}, this.state, {\n      handleDateChange: this.handleDateChange,\n      handleTempDateChange: this.handleTempDateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(AnimationController, Object.assign({}, this.state, {\n      handleDateChange: this.handleDateChange,\n      playingToggle: this.playingToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"footer-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 37\n      }\n    })), !fullMap && /*#__PURE__*/React.createElement(Col, {\n      lg: !fullPlot ? 5 : 12,\n      className: \"col-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Region, Object.assign({}, this.state, {\n      regionToggle: this.regionToggle,\n      ReactTooltip: ReactTooltip,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(MainCounts, Object.assign({}, this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(Plot, Object.assign({}, this.state, {\n      regionToggle: this.regionToggle,\n      fullPlotToggle: this.fullPlotToggle,\n      scaleToggle: this.scaleToggle,\n      handlePlotTypeChange: this.handlePlotTypeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(Tree, Object.assign({}, this.state, {\n      regionToggle: this.regionToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"footer-placeholder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 45\n      }\n    })))))), /*#__PURE__*/React.createElement(ReactTooltip, {\n      className: \"plot-tooltip\",\n      type: darkMode ? 'dark' : 'light',\n      html: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/components/App_corona.js"],"names":["React","Component","Fragment","Container","Row","Col","ReactTooltip","AiOutlineFullscreen","AiOutlineFullscreenExit","Helmet","Measure","format","Map","MapNavBar","DateSlider","AnimationController","MainCounts","Plot","Tree","NavBar","Loading","Region","TransmissionNetwork","i18n","us_map","str","updateDarkMode","mapText","defaultState","currentMap","metric","currentRegion","GLOBAL_ZH","playing","scale","mapZoom","fullMap","fullPlot","App","state","startDate","endDate","date","tempDate","plotDates","data","dataLoaded","lang","darkMode","mapDimensions","width","height","fullDimensions","plotType","fetchData","fetch","then","res","json","latest","Object","keys","confirmedCount","pop","setState","tooltipRebuild","updateFullDimensions","window","innerWidth","document","documentElement","clientWidth","body","innerHeight","clientHeight","Math","min","reset","mapToggle","newMap","WORLD_MAP","metricToggle","newMetric","regionToggle","newRegion","mapChange","TRANSMISSION","CHINA_ZH","length","CHINA_MAP2","CHINA_MAP1","US_ZH","US_MAP2","US_MAP","INTL_CONVEYANCE_ZH","JAPAN_MAP","map","find","x","regionName","EUROPE_MAP","playingToggle","scaleToggle","newScale","languageToggle","fullMapToggle","fullPlotToggle","hide","darkModeToggle","handleMapZoomChange","newZoom","handleDateChange","newDate","handleTempDateChange","newDates","newDateStrings","handlePlotTypeChange","newType","rebuild","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","FullScreenIcon","COVID19","opacity","letterSpacing","contentRect","bounds","measureRef","display","flexDirection","padding"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport ReactTooltip from 'react-tooltip'\r\nimport { AiOutlineFullscreen, AiOutlineFullscreenExit } from 'react-icons/ai'\r\nimport Helmet from 'react-helmet'\r\nimport Measure from 'react-measure'\r\nimport format from 'date-fns/format'\r\nimport './App.css'\r\nimport Map from './Map'\r\nimport MapNavBar from './MapNavBar'\r\nimport DateSlider from './DateSlider'\r\nimport AnimationController from './AnimationController'\r\nimport MainCounts from './MainCounts'\r\nimport Plot from './Plot'\r\nimport Tree from './Tree'\r\nimport NavBar from './NavBar'\r\nimport Loading from './Loading'\r\nimport Region from './Region'\r\nimport TransmissionNetwork from './TransmissionNetwork'\r\nimport { ReactComponent as Icon } from '../covid19.svg'\r\nimport i18n from '../data/i18n.yml'\r\nimport us_map from '../data/us_map.yml'\r\nimport * as str from '../utils/strings'\r\nimport { updateDarkMode } from '../utils/utils'\r\nimport { mapText } from '../utils/map_text'\r\n\r\nconst defaultState = {\r\n    currentMap: 'WORLD',\r\n    metric: 'confirmedCount',\r\n    currentRegion: [ str.GLOBAL_ZH ],\r\n    playing: false,\r\n    scale: 'linear',\r\n    mapZoom: 1,\r\n    fullMap: false,\r\n    fullPlot: false\r\n}\r\n\r\nclass App extends Component {\r\n    state = {\r\n        startDate: '2020-01-24',\r\n        endDate: '2020-02-14',\r\n        date: '2020-02-14',\r\n        tempDate: '2020-02-14',\r\n        plotDates: [ '2020-01-24', '2020-02-14' ],\r\n        data: null,\r\n        dataLoaded: false,\r\n        lang: 'en',\r\n        darkMode: false,\r\n        mapDimensions: {\r\n            width: -1,\r\n            height: -1\r\n        },\r\n        fullDimensions: {\r\n            width: -1,\r\n            height: -1\r\n        },\r\n        plotType: 'plot_basic',\r\n        ...defaultState\r\n    }\r\n\r\n    fetchData = () =>\r\n        fetch('https://raw.githubusercontent.com/stevenliuyi/covid19/master/public/data/all_minified.json').then((res) => res.json()).then((res) => {\r\n            const latest = Object.keys(res[str.GLOBAL_ZH].confirmedCount).pop()\r\n            this.setState({\r\n                data: res,\r\n                dataLoaded: true,\r\n                date: latest,\r\n                tempDate: latest,\r\n                endDate: latest,\r\n                plotDates: [ this.state.plotDates[0], latest ]\r\n            })\r\n            this.tooltipRebuild()\r\n        })\r\n\r\n    componentDidMount() {\r\n        updateDarkMode(this.state.darkMode)\r\n        this.fetchData()\r\n        this.updateFullDimensions()\r\n        window.addEventListener('resize', this.updateFullDimensions)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateFullDimensions)\r\n    }\r\n\r\n    updateFullDimensions = () => {\r\n        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth\r\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\r\n\r\n        if (height < 750 || width < 992) {\r\n            if (this.state.fullMap) this.setState({ fullMap: false })\r\n            if (this.state.fullPlot) this.setState({ fullPlot: false })\r\n        }\r\n\r\n        this.setState({\r\n            fullDimensions: {\r\n                height: Math.min(height - 250, (width - 200) * 3 / 4),\r\n                width: Math.min((height - 250) * 4 / 3, width - 200)\r\n            }\r\n        })\r\n    }\r\n\r\n    reset = () =>\r\n        this.setState({\r\n            ...defaultState,\r\n            date: this.state.endDate,\r\n            tempDate: this.state.endDate,\r\n            plotDates: [ this.state.startDate, this.state.endDate ]\r\n        })\r\n\r\n    mapToggle = (newMap) =>\r\n        this.setState({\r\n            currentMap: newMap,\r\n            // do not reset map zoom when switching between two China maps\r\n            mapZoom: newMap === str.WORLD_MAP || this.state.currentMap === str.WORLD_MAP ? 1 : this.state.mapZoom\r\n        })\r\n\r\n    metricToggle = (newMetric) => this.setState({ metric: newMetric })\r\n\r\n    regionToggle = (newRegion, mapChange = true) => {\r\n        const { currentMap } = this.state\r\n        this.setState({ currentRegion: newRegion })\r\n        if (!mapChange) return\r\n\r\n        if (currentMap === str.TRANSMISSION) return\r\n\r\n        if (newRegion[0] === str.CHINA_ZH) {\r\n            if (newRegion.length >= 4) {\r\n                this.mapToggle(str.CHINA_MAP2)\r\n            } else if (currentMap !== str.CHINA_MAP2) {\r\n                this.mapToggle(str.CHINA_MAP1)\r\n            }\r\n        } else if (newRegion[0] === str.US_ZH) {\r\n            if (newRegion.length >= 2 && newRegion[1] in us_map) {\r\n                this.mapToggle(str.US_MAP2)\r\n            } else {\r\n                this.mapToggle(str.US_MAP)\r\n            }\r\n        } else if (newRegion[0] === str.INTL_CONVEYANCE_ZH) {\r\n            this.mapToggle(str.JAPAN_MAP)\r\n        } else {\r\n            let map = Object.keys(mapText).find((x) => mapText[x].regionName === newRegion[0])\r\n            map = map != null ? map : str.WORLD_MAP\r\n            if (map === str.WORLD_MAP && currentMap === str.EUROPE_MAP) map = str.EUROPE_MAP\r\n            this.mapToggle(map)\r\n        }\r\n    }\r\n\r\n    playingToggle = () => this.setState({ playing: !this.state.playing })\r\n\r\n    scaleToggle = (newScale) => this.setState({ scale: newScale })\r\n\r\n    languageToggle = () => this.setState({ lang: this.state.lang === 'en' ? 'en' : 'en' })\r\n\r\n    fullMapToggle = () => {\r\n        this.setState({ fullMap: !this.state.fullMap })\r\n    }\r\n\r\n    fullPlotToggle = () => {\r\n        ReactTooltip.hide()\r\n        this.setState({ fullPlot: !this.state.fullPlot })\r\n    }\r\n\r\n    darkModeToggle = () => {\r\n        updateDarkMode(!this.state.darkMode)\r\n        this.setState({ darkMode: !this.state.darkMode })\r\n    }\r\n\r\n    handleMapZoomChange = (newZoom) => this.setState({ mapZoom: newZoom })\r\n\r\n    handleDateChange = (newDate) => this.setState({ date: newDate, tempDate: newDate })\r\n\r\n    handleTempDateChange = (newDates) => {\r\n        const newDateStrings = newDates.map((x) => format(x, 'yyyy-MM-dd'))\r\n        if (!this.state.fullPlot) {\r\n            this.setState({ tempDate: newDateStrings[0] })\r\n        } else {\r\n            this.setState({ plotDates: newDateStrings })\r\n        }\r\n    }\r\n\r\n    handlePlotTypeChange = (newType) => this.setState({ plotType: newType })\r\n\r\n    tooltipRebuild = () => ReactTooltip.rebuild()\r\n\r\n    render() {\r\n        const { lang, dataLoaded, currentMap, fullMap, fullPlot, darkMode } = this.state\r\n        const FullScreenIcon = fullMap ? AiOutlineFullscreenExit : AiOutlineFullscreen\r\n\r\n        return (\r\n            <div className={`App ${darkMode ? 'dark' : ''}`}>\r\n                <Helmet>\r\n                    <title>{i18n.COVID19[lang]}</title>\r\n                </Helmet>\r\n                {!dataLoaded ? (\r\n                    <Loading />\r\n                ) : (\r\n                    <Fragment>\r\n                        <Container className={`app-container ${fullMap ? 'map-full' : fullPlot ? 'plot-full' : ''}`}>\r\n                            <Row>\r\n                                <Col lg={!fullMap ? 7 : 12}>\r\n                                    <div className=\"header\">\r\n                                        <span className=\"header-icon\" style={{ opacity: dataLoaded ? 1 : 0 }}>\r\n                                            <Icon />\r\n                                        </span>\r\n                                        <span\r\n                                            className=\"header-title\"\r\n                                            style={{ letterSpacing: lang === 'zh' ? '1px' : 'normal' }}\r\n                                        >\r\n                                            {i18n.COVID19[lang]}\r\n                                        </span>\r\n                                    </div>\r\n                                    <NavBar\r\n                                        {...this.state}\r\n                                        scaleToggle={this.scaleToggle}\r\n                                        // languageToggle={this.languageToggle}\r\n                                        darkModeToggle={this.darkModeToggle}\r\n                                        reset={this.reset}\r\n                                    />\r\n                                    {!fullPlot && (\r\n                                        <Measure\r\n                                            bounds\r\n                                            onResize={(contentRect) => {\r\n                                                this.setState({ mapDimensions: contentRect.bounds })\r\n                                            }}\r\n                                        >\r\n                                            {({ measureRef }) => (\r\n                                                <div\r\n                                                    ref={measureRef}\r\n                                                    className=\"map\"\r\n                                                    style={{\r\n                                                        height: !fullMap\r\n                                                            ? this.state.mapDimensions.width * 3 / 4\r\n                                                            : this.state.fullDimensions.height,\r\n                                                        width: !fullMap ? '100%' : this.state.fullDimensions.width\r\n                                                    }}\r\n                                                >\r\n                                                    {currentMap === str.TRANSMISSION && (\r\n                                                        <TransmissionNetwork\r\n                                                            {...this.state}\r\n                                                            regionToggle={this.regionToggle}\r\n                                                            tooltipRebuild={this.tooltipRebuild}\r\n                                                        />\r\n                                                    )}\r\n                                                    {currentMap !== str.TRANSMISSION && (\r\n                                                        <Map\r\n                                                            {...this.state}\r\n                                                            handleMapZoomChange={this.handleMapZoomChange}\r\n                                                            mapToggle={this.mapToggle}\r\n                                                            regionToggle={this.regionToggle}\r\n                                                            tooltipRebuild={this.tooltipRebuild}\r\n                                                        />\r\n                                                    )}\r\n                                                    <div className=\"map-full-button\">\r\n                                                        <FullScreenIcon\r\n                                                            size={fullMap ? 30 : 20}\r\n                                                            onClick={this.fullMapToggle}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </Measure>\r\n                                    )}\r\n                                    <MapNavBar\r\n                                        {...this.state}\r\n                                        mapToggle={this.mapToggle}\r\n                                        metricToggle={this.metricToggle}\r\n                                        regionToggle={this.regionToggle}\r\n                                    />\r\n                                    <DateSlider\r\n                                        {...this.state}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        handleTempDateChange={this.handleTempDateChange}\r\n                                    />\r\n                                    <AnimationController\r\n                                        {...this.state}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        playingToggle={this.playingToggle}\r\n                                    />\r\n                                    <div className=\"footer-white\" />\r\n                                </Col>\r\n                                {!fullMap && (\r\n                                    <Col lg={!fullPlot ? 5 : 12} className=\"col-right\">\r\n                                        <Row style={{ display: 'flex', flexDirection: 'column', padding: 10 }}>\r\n                                            <Region\r\n                                                {...this.state}\r\n                                                regionToggle={this.regionToggle}\r\n                                                ReactTooltip={ReactTooltip}\r\n                                            />\r\n                                            <MainCounts {...this.state} />\r\n                                            <Plot\r\n                                                {...this.state}\r\n                                                regionToggle={this.regionToggle}\r\n                                                fullPlotToggle={this.fullPlotToggle}\r\n                                                scaleToggle={this.scaleToggle}\r\n                                                handlePlotTypeChange={this.handlePlotTypeChange}\r\n                                            />\r\n                                            <Tree {...this.state} regionToggle={this.regionToggle} />\r\n                                            <div className=\"footer-placeholder\" />\r\n                                        </Row>\r\n                                    </Col>\r\n                                )}\r\n                            </Row>\r\n                        </Container>\r\n                        {/* <Footer {...this.state} /> */}\r\n                    </Fragment>\r\n                )}\r\n                <ReactTooltip className=\"plot-tooltip\" type={darkMode ? 'dark' : 'light'} html={true} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}