{"ast":null,"code":"import _toConsumableArray from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{ResponsiveStream}from'@nivo/stream';var StreamPlot=/*#__PURE__*/function(_Component){_inherits(StreamPlot,_Component);var _super=_createSuper(StreamPlot);function StreamPlot(){_classCallCheck(this,StreamPlot);return _super.apply(this,arguments);}_createClass(StreamPlot,[{key:\"render\",value:function render(){var _this$props=this.props,darkMode=_this$props.darkMode,plotParameters=_this$props.plotParameters,plotDataAll=_this$props.plotDataAll,plotTheme=_this$props.plotTheme,offsetType=_this$props.offsetType,fullPlot=_this$props.fullPlot;if(plotParameters.type!=='stream')return/*#__PURE__*/React.createElement(\"div\",null);var colors=function colors(d){return darkMode?[0,1,2,3,4,5].map(function(x){return\"var(--primary-color-\".concat(x,\")\");})[plotDataAll.plotKeys.length-1-d.index]:[8,6,5,4,3,2].map(function(x){return\"var(--primary-color-\".concat(x,\")\");})[plotDataAll.plotKeys.length-1-d.index];};if(fullPlot){colors=function colors(d){return darkMode?_toConsumableArray(Array(10).keys()).map(function(x){return\"var(--primary-color-\".concat(x,\")\");})[plotDataAll.plotKeys.length-1-d.index]:_toConsumableArray(Array(10).keys()).reverse().map(function(x){return\"var(--primary-color-\".concat(x,\")\");})[plotDataAll.plotKeys.length-1-d.index];};}return/*#__PURE__*/React.createElement(ResponsiveStream,{data:plotDataAll.plotData,keys:plotDataAll.plotKeys,theme:plotTheme,curve:\"monotoneX\",margin:{top:20,right:115,bottom:35,left:40},axisTop:null,axisRight:null,axisBottom:{orient:'bottom',tickSize:0,tickPadding:5,tickRotation:!fullPlot?0:-30,format:function format(idx){var n=!fullPlot?5:10;return plotParameters.xAxisFormat(idx,Math.round(plotDataAll.plotData.length/n),plotDataAll.dates);}},axisLeft:{orient:'left',tickSize:5,tickPadding:5,tickRotation:0,tickValues:5,format:offsetType!=='expand'?plotParameters.yAxisFormat:'.0%'},offsetType:offsetType,colors:colors,fillOpacity:0.85,animate:false,enableGridX:false,enableGridY:true,legends:plotParameters.legends,isInteractive:true,enableStackTooltip:true,tooltipFormat:function tooltipFormat(x){return/*#__PURE__*/React.createElement(\"b\",null,x.value);}});}}]);return StreamPlot;}(Component);export{StreamPlot as default};","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/components/StreamPlot.js"],"names":["React","Component","ResponsiveStream","StreamPlot","props","darkMode","plotParameters","plotDataAll","plotTheme","offsetType","fullPlot","type","colors","d","map","x","plotKeys","length","index","Array","keys","reverse","plotData","top","right","bottom","left","orient","tickSize","tickPadding","tickRotation","format","idx","n","xAxisFormat","Math","round","dates","tickValues","yAxisFormat","legends","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { ResponsiveStream } from '@nivo/stream'\r\n\r\nexport default class StreamPlot extends Component {\r\n    render() {\r\n        const { darkMode, plotParameters, plotDataAll, plotTheme, offsetType, fullPlot } = this.props\r\n\r\n        if (plotParameters.type !== 'stream') return <div />\r\n\r\n        let colors = (d) =>\r\n            darkMode\r\n                ? [ 0, 1, 2, 3, 4, 5 ].map((x) => `var(--primary-color-${x})`)[\r\n                      plotDataAll.plotKeys.length - 1 - d.index\r\n                  ]\r\n                : [ 8, 6, 5, 4, 3, 2 ].map((x) => `var(--primary-color-${x})`)[\r\n                      plotDataAll.plotKeys.length - 1 - d.index\r\n                  ]\r\n\r\n        if (fullPlot) {\r\n            colors = (d) =>\r\n                darkMode\r\n                    ? [ ...Array(10).keys() ].map((x) => `var(--primary-color-${x})`)[\r\n                          plotDataAll.plotKeys.length - 1 - d.index\r\n                      ]\r\n                    : [ ...Array(10).keys() ].reverse().map((x) => `var(--primary-color-${x})`)[\r\n                          plotDataAll.plotKeys.length - 1 - d.index\r\n                      ]\r\n        }\r\n\r\n        return (\r\n            <ResponsiveStream\r\n                data={plotDataAll.plotData}\r\n                keys={plotDataAll.plotKeys}\r\n                theme={plotTheme}\r\n                curve=\"monotoneX\"\r\n                margin={{ top: 20, right: 115, bottom: 35, left: 40 }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    orient: 'bottom',\r\n                    tickSize: 0,\r\n                    tickPadding: 5,\r\n                    tickRotation: !fullPlot ? 0 : -30,\r\n                    format: (idx) => {\r\n                        const n = !fullPlot ? 5 : 10\r\n                        return plotParameters.xAxisFormat(\r\n                            idx,\r\n                            Math.round(plotDataAll.plotData.length / n),\r\n                            plotDataAll.dates\r\n                        )\r\n                    }\r\n                }}\r\n                axisLeft={{\r\n                    orient: 'left',\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    tickValues: 5,\r\n                    format: offsetType !== 'expand' ? plotParameters.yAxisFormat : '.0%'\r\n                }}\r\n                offsetType={offsetType}\r\n                colors={colors}\r\n                fillOpacity={0.85}\r\n                animate={false}\r\n                enableGridX={false}\r\n                enableGridY={true}\r\n                legends={plotParameters.legends}\r\n                isInteractive={true}\r\n                enableStackTooltip={true}\r\n                tooltipFormat={(x) => <b>{x.value}</b>}\r\n            />\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}