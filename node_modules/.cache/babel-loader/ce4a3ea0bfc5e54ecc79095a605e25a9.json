{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\src\\\\components\\\\PlotSelector.js\";\nimport React, { Component, Fragment } from 'react';\nimport { MdArrowDropDownCircle } from 'react-icons/md';\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { plotTypes } from '../utils/plot_types';\nimport { getDataFromRegion } from '../utils/utils';\nimport * as str from '../utils/strings';\nimport i18n from '../data/i18n.yml';\nexport default class PlotSelector extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dropdownOpen: false,\n      height: -1\n    };\n\n    this.updateHeight = () => {\n      const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n      this.setState({\n        height\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.updateHeight();\n    window.addEventListener('resize', this.updateHeight);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateHeight);\n  }\n\n  render() {\n    const {\n      currentPlotType,\n      currentRegion,\n      lang,\n      data,\n      onPlotTypeChange\n    } = this.props;\n    const plotParameters = plotTypes[currentPlotType];\n    const currentRegionIsGlobal = currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH;\n    const hasSubregions = Object.keys(getDataFromRegion(data, currentRegion)).length > 4 || currentRegionIsGlobal;\n    return /*#__PURE__*/React.createElement(UncontrolledDropdown, {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DropdownToggle, {\n      tag: \"span\",\n      className: \"line-plot-title\",\n      \"data-toggle\": \"dropdown\",\n      \"aria-expanded\": this.state.dropdownOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }, plotParameters.text[lang]), /*#__PURE__*/React.createElement(MdArrowDropDownCircle, {\n      size: 20,\n      className: \"dropdown-arrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(DropdownMenu, {\n      modifiers: {\n        setMaxHeight: {\n          enabled: true,\n          order: 890,\n          fn: data => {\n            return { ...data,\n              styles: { ...data.styles,\n                overflowY: 'auto',\n                maxHeight: this.state.height * 0.6\n              }\n            };\n          }\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, Object.keys(plotTypes).map(plotType => // no One-vs-Rest comparison plot when current region is Global\n    plotType === 'plot_one_vs_rest' && currentRegionIsGlobal ? /*#__PURE__*/React.createElement(\"div\", {\n      key: `dropdown-${plotType}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }) : plotTypes[plotType].subregions && !hasSubregions ? /*#__PURE__*/React.createElement(\"div\", {\n      key: `dropdown-${plotType}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 33\n      }\n    }) : /*#__PURE__*/React.createElement(Fragment, {\n      key: `dropdown-${plotType}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }\n    }, plotType === 'plot_basic' && hasSubregions && /*#__PURE__*/React.createElement(DropdownItem, {\n      header: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 54\n      }\n    }, i18n.OVERALL[lang]), plotType === 'plot_ranking' && hasSubregions && /*#__PURE__*/React.createElement(DropdownItem, {\n      divider: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 86\n      }\n    }), plotType === 'plot_ranking' && hasSubregions && /*#__PURE__*/React.createElement(DropdownItem, {\n      header: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 54\n      }\n    }, i18n.SUBREGIONS[lang]), /*#__PURE__*/React.createElement(DropdownItem, {\n      className: currentPlotType === plotType ? 'current' : '',\n      onClick: () => {\n        onPlotTypeChange(plotType);\n        this.setState({\n          dropdownOpen: !this.state.dropdownOpen\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 37\n      }\n    }, plotTypes[plotType].text[lang])))));\n  }\n\n}","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/components/PlotSelector.js"],"names":["React","Component","Fragment","MdArrowDropDownCircle","UncontrolledDropdown","DropdownToggle","DropdownMenu","DropdownItem","plotTypes","getDataFromRegion","str","i18n","PlotSelector","state","dropdownOpen","height","updateHeight","window","innerHeight","document","documentElement","clientHeight","body","setState","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","currentPlotType","currentRegion","lang","data","onPlotTypeChange","props","plotParameters","currentRegionIsGlobal","length","GLOBAL_ZH","hasSubregions","Object","keys","text","setMaxHeight","enabled","order","fn","styles","overflowY","maxHeight","map","plotType","subregions","OVERALL","SUBREGIONS"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport { MdArrowDropDownCircle } from 'react-icons/md'\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\r\nimport { plotTypes } from '../utils/plot_types'\r\nimport { getDataFromRegion } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nexport default class PlotSelector extends Component {\r\n    state = {\r\n        dropdownOpen: false,\r\n        height: -1\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateHeight()\r\n        window.addEventListener('resize', this.updateHeight)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateHeight)\r\n    }\r\n\r\n    updateHeight = () => {\r\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\r\n        this.setState({ height })\r\n    }\r\n\r\n    render() {\r\n        const { currentPlotType, currentRegion, lang, data, onPlotTypeChange } = this.props\r\n        const plotParameters = plotTypes[currentPlotType]\r\n        const currentRegionIsGlobal = currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH\r\n        const hasSubregions = Object.keys(getDataFromRegion(data, currentRegion)).length > 4 || currentRegionIsGlobal\r\n\r\n        return (\r\n            <UncontrolledDropdown className=\"\">\r\n                <DropdownToggle\r\n                    tag=\"span\"\r\n                    className=\"line-plot-title\"\r\n                    data-toggle=\"dropdown\"\r\n                    aria-expanded={this.state.dropdownOpen}\r\n                >\r\n                    <span>{plotParameters.text[lang]}</span>\r\n                    <MdArrowDropDownCircle size={20} className=\"dropdown-arrow\" />\r\n                </DropdownToggle>\r\n                <DropdownMenu\r\n                    modifiers={{\r\n                        setMaxHeight: {\r\n                            enabled: true,\r\n                            order: 890,\r\n                            fn: (data) => {\r\n                                return {\r\n                                    ...data,\r\n                                    styles: {\r\n                                        ...data.styles,\r\n                                        overflowY: 'auto',\r\n                                        maxHeight: this.state.height * 0.6\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    {Object.keys(plotTypes).map(\r\n                        (plotType) =>\r\n                            // no One-vs-Rest comparison plot when current region is Global\r\n                            plotType === 'plot_one_vs_rest' && currentRegionIsGlobal ? (\r\n                                <div key={`dropdown-${plotType}`} />\r\n                            ) : plotTypes[plotType].subregions && !hasSubregions ? (\r\n                                <div key={`dropdown-${plotType}`} />\r\n                            ) : (\r\n                                <Fragment key={`dropdown-${plotType}`}>\r\n                                    {plotType === 'plot_basic' &&\r\n                                    hasSubregions && <DropdownItem header>{i18n.OVERALL[lang]}</DropdownItem>}\r\n                                    {plotType === 'plot_ranking' && hasSubregions && <DropdownItem divider />}\r\n                                    {plotType === 'plot_ranking' &&\r\n                                    hasSubregions && <DropdownItem header>{i18n.SUBREGIONS[lang]}</DropdownItem>}\r\n                                    <DropdownItem\r\n                                        className={currentPlotType === plotType ? 'current' : ''}\r\n                                        onClick={() => {\r\n                                            onPlotTypeChange(plotType)\r\n                                            this.setState({\r\n                                                dropdownOpen: !this.state.dropdownOpen\r\n                                            })\r\n                                        }}\r\n                                    >\r\n                                        {plotTypes[plotType].text[lang]}\r\n                                    </DropdownItem>\r\n                                </Fragment>\r\n                            )\r\n                    )}\r\n                </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}