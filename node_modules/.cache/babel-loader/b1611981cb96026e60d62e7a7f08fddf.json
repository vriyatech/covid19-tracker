{"ast":null,"code":"import _classCallCheck from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _createSuper from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import _inherits from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from'react';import{Graph}from'react-d3-graph';import{scaleSequential,scaleLog,scaleLinear}from'd3-scale';import{interpolateMagma}from'd3-scale-chromatic';import transmissions from'../data/transmissions.yml';import maps from'../data/maps.yml';import{parseDate,getDataFromRegion}from'../utils/utils';import*as str from'../utils/strings';var CountryNode=function CountryNode(_ref){var node=_ref.node,darkMode=_ref.darkMode;return/*#__PURE__*/React.createElement(\"div\",{className:\"country-node \".concat(node.selected||node.highlighted?'selected':''),style:{backgroundColor:node.selected?'#fff':node.color?node.color:darkMode?'var(--dark-grey)':'var(--lighter-grey)',fontSize:node.fontSize}},/*#__PURE__*/React.createElement(\"style\",null,node.selected?\"#\".concat(node.id,\" text {font-weight: bold; font-size: 14px; }\"):node.highlighted?\"#\".concat(node.id,\" text {font-size: 9px; }\"):\"#\".concat(node.id,\" text {font-size: \").concat(node.labelFontSize,\"px;}\"),\".country-node.selected,.country-node:hover { border: solid \".concat(node.strokeWidth,\"px \").concat(darkMode?'var(--primary-color-4)':'var(--primary-color-5)',\";}\")));};var TransmissionNetwork=/*#__PURE__*/function(_Component){_inherits(TransmissionNetwork,_Component);var _super=_createSuper(TransmissionNetwork);function TransmissionNetwork(){var _this;_classCallCheck(this,TransmissionNetwork);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.getRegion=function(id){var region=[str.MAINLAND_CHINA_ZH,str.HONGKONG_ZH,str.MACAO_ZH,str.TAIWAN_ZH].includes(id)?[str.CHINA_ZH,id]:id===str.DIAMOND_PRINCESS_ZH?[str.INTL_CONVEYANCE_ZH,str.DIAMOND_PRINCESS_ZH]:[id];return region;};_this.getCount=function(id){var _this$props=_this.props,data=_this$props.data,date=_this$props.date,metric=_this$props.metric;var regionData=getDataFromRegion(data,_this.getRegion(id));var count=regionData[metric][date]?regionData[metric][date]:0;return count;};_this.getColor=function(id,darkMode){var count=_this.getCount(id);var currentScale=_this.getScale();var colorConvert=function colorConvert(x){return darkMode?x*0.95+0.05:0.95-x*0.95;};var colorScale=scaleSequential(function(d){return interpolateMagma(colorConvert(currentScale(d)));});return colorScale(count);};_this.getScale=function(){var _this$props2=_this.props,scale=_this$props2.scale,metric=_this$props2.metric;var currentScale=scale==='linear'?scaleLinear:scaleLog;return currentScale().domain([1,maps[str.TRANSMISSION][\"maxScale_\".concat(metric)]]);};_this.getDisplayName=function(id){var _this$props3=_this.props,lang=_this$props3.lang,data=_this$props3.data;return lang==='zh'?id:getDataFromRegion(data,_this.getRegion(id)).ENGLISH;};return _this;}_createClass(TransmissionNetwork,[{key:\"render\",value:function render(){var _this2=this;var _this$props4=this.props,mapDimensions=_this$props4.mapDimensions,date=_this$props4.date,regionToggle=_this$props4.regionToggle,currentRegion=_this$props4.currentRegion,currentMap=_this$props4.currentMap,darkMode=_this$props4.darkMode;if(currentMap!==str.TRANSMISSION)return/*#__PURE__*/React.createElement(\"div\",null);var networkConfig={directed:true,automaticRearrangeAfterDropNode:true,panAndZoom:true,minZoom:0.75,maxZoom:2,focusAnimationDuration:0.5,nodeHighlightBehavior:true,width:mapDimensions.width,height:mapDimensions.height,highlightOpacity:0.2,d3:{gravity:-20,linkLength:mapDimensions.width*0.15},link:{color:darkMode?'var(--darkest-grey)':'var(--lighter-grey)',highlightColor:darkMode?'var(--primary-color-4)':'var(--primary-color-5)',strokeWidth:1,mouseCursor:'default'},node:{labelProperty:'displayName',viewGenerator:function viewGenerator(node){return/*#__PURE__*/React.createElement(CountryNode,{node:node,darkMode:darkMode});}}};var nodes={};transmissions.forEach(function(trans){if(parseDate(trans.date)>parseDate(date))return;if(trans.from in nodes){nodes[trans.from]+=1;}else{nodes[trans.from]=1;}if(trans.to in nodes){nodes[trans.to]+=0;}else{nodes[trans.to]=0;}});var data={nodes:Object.keys(nodes).map(function(x){return{id:x,displayName:_this2.getDisplayName(x),size:Math.max(Math.min(nodes[x]*20,230),150),count:_this2.getCount(x),color:_this2.getColor(x,darkMode),labelFontSize:nodes[x]>6?9:0,selected:currentRegion[currentRegion.length-1]===x?true:false};}),links:transmissions.filter(function(trans){return parseDate(trans.date)<=parseDate(date);}).map(function(trans){return{source:trans.from,target:trans.to};})};return/*#__PURE__*/React.createElement(Graph,{id:\"transmission-network\"// id is mandatory, if no id is defined rd3g will throw an error\n,data:data,config:networkConfig,onClickNode:function onClickNode(id){return regionToggle(_this2.getRegion(id));}});}}]);return TransmissionNetwork;}(Component);export{TransmissionNetwork as default};","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/components/TransmissionNetwork.js"],"names":["React","Component","Graph","scaleSequential","scaleLog","scaleLinear","interpolateMagma","transmissions","maps","parseDate","getDataFromRegion","str","CountryNode","node","darkMode","selected","highlighted","backgroundColor","color","fontSize","id","labelFontSize","strokeWidth","TransmissionNetwork","getRegion","region","MAINLAND_CHINA_ZH","HONGKONG_ZH","MACAO_ZH","TAIWAN_ZH","includes","CHINA_ZH","DIAMOND_PRINCESS_ZH","INTL_CONVEYANCE_ZH","getCount","props","data","date","metric","regionData","count","getColor","currentScale","getScale","colorConvert","x","colorScale","d","scale","domain","TRANSMISSION","getDisplayName","lang","ENGLISH","mapDimensions","regionToggle","currentRegion","currentMap","networkConfig","directed","automaticRearrangeAfterDropNode","panAndZoom","minZoom","maxZoom","focusAnimationDuration","nodeHighlightBehavior","width","height","highlightOpacity","d3","gravity","linkLength","link","highlightColor","mouseCursor","labelProperty","viewGenerator","nodes","forEach","trans","from","to","Object","keys","map","displayName","size","Math","max","min","length","links","filter","source","target"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Graph } from 'react-d3-graph'\r\nimport { scaleSequential, scaleLog, scaleLinear } from 'd3-scale'\r\nimport { interpolateMagma } from 'd3-scale-chromatic'\r\nimport transmissions from '../data/transmissions.yml'\r\nimport maps from '../data/maps.yml'\r\nimport { parseDate, getDataFromRegion } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\n\r\nconst CountryNode = ({ node, darkMode }) => {\r\n    return (\r\n        <div\r\n            className={`country-node ${node.selected || node.highlighted ? 'selected' : ''}`}\r\n            style={{\r\n                backgroundColor: node.selected\r\n                    ? '#fff'\r\n                    : node.color ? node.color : darkMode ? 'var(--dark-grey)' : 'var(--lighter-grey)',\r\n                fontSize: node.fontSize\r\n            }}\r\n        >\r\n            <style>\r\n                {node.selected ? (\r\n                    `#${node.id} text {font-weight: bold; font-size: 14px; }`\r\n                ) : node.highlighted ? (\r\n                    `#${node.id} text {font-size: 9px; }`\r\n                ) : (\r\n                    `#${node.id} text {font-size: ${node.labelFontSize}px;}`\r\n                )}\r\n                {`.country-node.selected,.country-node:hover { border: solid ${node.strokeWidth}px ${darkMode\r\n                    ? 'var(--primary-color-4)'\r\n                    : 'var(--primary-color-5)'};}`}\r\n            </style>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default class TransmissionNetwork extends Component {\r\n    getRegion = (id) => {\r\n        const region = [ str.MAINLAND_CHINA_ZH, str.HONGKONG_ZH, str.MACAO_ZH, str.TAIWAN_ZH ].includes(id)\r\n            ? [ str.CHINA_ZH, id ]\r\n            : id === str.DIAMOND_PRINCESS_ZH ? [ str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH ] : [ id ]\r\n\r\n        return region\r\n    }\r\n\r\n    getCount = (id) => {\r\n        const { data, date, metric } = this.props\r\n        const regionData = getDataFromRegion(data, this.getRegion(id))\r\n        const count = regionData[metric][date] ? regionData[metric][date] : 0\r\n\r\n        return count\r\n    }\r\n\r\n    getColor = (id, darkMode) => {\r\n        const count = this.getCount(id)\r\n        const currentScale = this.getScale()\r\n        const colorConvert = (x) => (darkMode ? x * 0.95 + 0.05 : 0.95 - x * 0.95)\r\n        const colorScale = scaleSequential((d) => interpolateMagma(colorConvert(currentScale(d))))\r\n\r\n        return colorScale(count)\r\n    }\r\n\r\n    getScale = () => {\r\n        const { scale, metric } = this.props\r\n        const currentScale = scale === 'linear' ? scaleLinear : scaleLog\r\n        return currentScale().domain([ 1, maps[str.TRANSMISSION][`maxScale_${metric}`] ])\r\n    }\r\n\r\n    getDisplayName = (id) => {\r\n        const { lang, data } = this.props\r\n        return lang === 'zh' ? id : getDataFromRegion(data, this.getRegion(id)).ENGLISH\r\n    }\r\n\r\n    render() {\r\n        const { mapDimensions, date, regionToggle, currentRegion, currentMap, darkMode } = this.props\r\n\r\n        if (currentMap !== str.TRANSMISSION) return <div />\r\n\r\n        const networkConfig = {\r\n            directed: true,\r\n            automaticRearrangeAfterDropNode: true,\r\n            panAndZoom: true,\r\n            minZoom: 0.75,\r\n            maxZoom: 2,\r\n            focusAnimationDuration: 0.5,\r\n            nodeHighlightBehavior: true,\r\n            width: mapDimensions.width,\r\n            height: mapDimensions.height,\r\n            highlightOpacity: 0.2,\r\n            d3: {\r\n                gravity: -20,\r\n                linkLength: mapDimensions.width * 0.15\r\n            },\r\n            link: {\r\n                color: darkMode ? 'var(--darkest-grey)' : 'var(--lighter-grey)',\r\n                highlightColor: darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)',\r\n                strokeWidth: 1,\r\n                mouseCursor: 'default'\r\n            },\r\n            node: {\r\n                labelProperty: 'displayName',\r\n                viewGenerator: (node) => <CountryNode node={node} darkMode={darkMode} />\r\n            }\r\n        }\r\n\r\n        let nodes = {}\r\n        transmissions.forEach((trans) => {\r\n            if (parseDate(trans.date) > parseDate(date)) return\r\n\r\n            if (trans.from in nodes) {\r\n                nodes[trans.from] += 1\r\n            } else {\r\n                nodes[trans.from] = 1\r\n            }\r\n            if (trans.to in nodes) {\r\n                nodes[trans.to] += 0\r\n            } else {\r\n                nodes[trans.to] = 0\r\n            }\r\n        })\r\n\r\n        const data = {\r\n            nodes: Object.keys(nodes).map((x) => ({\r\n                id: x,\r\n                displayName: this.getDisplayName(x),\r\n                size: Math.max(Math.min(nodes[x] * 20, 230), 150),\r\n                count: this.getCount(x),\r\n                color: this.getColor(x, darkMode),\r\n                labelFontSize: nodes[x] > 6 ? 9 : 0,\r\n                selected: currentRegion[currentRegion.length - 1] === x ? true : false\r\n            })),\r\n            links: transmissions\r\n                .filter((trans) => parseDate(trans.date) <= parseDate(date))\r\n                .map((trans) => ({ source: trans.from, target: trans.to }))\r\n        }\r\n\r\n        return (\r\n            <Graph\r\n                id=\"transmission-network\" // id is mandatory, if no id is defined rd3g will throw an error\r\n                data={data}\r\n                config={networkConfig}\r\n                onClickNode={(id) => regionToggle(this.getRegion(id))}\r\n            />\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}