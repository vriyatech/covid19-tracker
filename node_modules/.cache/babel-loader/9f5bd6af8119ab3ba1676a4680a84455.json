{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\src\\\\components\\\\TransmissionNetwork.js\";\nimport React, { Component } from 'react';\nimport { Graph } from 'react-d3-graph';\nimport { scaleSequential, scaleLog, scaleLinear } from 'd3-scale';\nimport { interpolateMagma } from 'd3-scale-chromatic';\nimport transmissions from '../data/transmissions.yml';\nimport maps from '../data/maps.yml';\nimport { parseDate, getDataFromRegion } from '../utils/utils';\nimport * as str from '../utils/strings';\n\nconst CountryNode = ({\n  node,\n  darkMode\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `country-node ${node.selected || node.highlighted ? 'selected' : ''}`,\n    style: {\n      backgroundColor: node.selected ? '#fff' : node.color ? node.color : darkMode ? 'var(--dark-grey)' : 'var(--lighter-grey)',\n      fontSize: node.fontSize\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"style\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, node.selected ? `#${node.id} text {font-weight: bold; font-size: 14px; }` : node.highlighted ? `#${node.id} text {font-size: 9px; }` : `#${node.id} text {font-size: ${node.labelFontSize}px;}`, `.country-node.selected,.country-node:hover { border: solid ${node.strokeWidth}px ${darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)'};}`));\n};\n\nexport default class TransmissionNetwork extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getRegion = id => {\n      const region = [str.MAINLAND_CHINA_ZH, str.HONGKONG_ZH, str.MACAO_ZH, str.TAIWAN_ZH].includes(id) ? [str.CHINA_ZH, id] : id === str.DIAMOND_PRINCESS_ZH ? [str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH] : [id];\n      return region;\n    };\n\n    this.getCount = id => {\n      const {\n        data,\n        date,\n        metric\n      } = this.props;\n      const regionData = getDataFromRegion(data, this.getRegion(id));\n      const count = regionData[metric][date] ? regionData[metric][date] : 0;\n      return count;\n    };\n\n    this.getColor = (id, darkMode) => {\n      const count = this.getCount(id);\n      const currentScale = this.getScale();\n\n      const colorConvert = x => darkMode ? x * 0.95 + 0.05 : 0.95 - x * 0.95;\n\n      const colorScale = scaleSequential(d => interpolateMagma(colorConvert(currentScale(d))));\n      return colorScale(count);\n    };\n\n    this.getScale = () => {\n      const {\n        scale,\n        metric\n      } = this.props;\n      const currentScale = scale === 'linear' ? scaleLinear : scaleLog;\n      return currentScale().domain([1, maps[str.TRANSMISSION][`maxScale_${metric}`]]);\n    };\n\n    this.getDisplayName = id => {\n      const {\n        lang,\n        data\n      } = this.props;\n      return lang === 'zh' ? id : getDataFromRegion(data, this.getRegion(id)).ENGLISH;\n    };\n  }\n\n  render() {\n    const {\n      mapDimensions,\n      date,\n      regionToggle,\n      currentRegion,\n      currentMap,\n      darkMode\n    } = this.props;\n    if (currentMap !== str.TRANSMISSION) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 53\n      }\n    });\n    const networkConfig = {\n      directed: true,\n      automaticRearrangeAfterDropNode: true,\n      panAndZoom: true,\n      minZoom: 0.75,\n      maxZoom: 2,\n      focusAnimationDuration: 0.5,\n      nodeHighlightBehavior: true,\n      width: mapDimensions.width,\n      height: mapDimensions.height,\n      highlightOpacity: 0.2,\n      d3: {\n        gravity: -20,\n        linkLength: mapDimensions.width * 0.15\n      },\n      link: {\n        color: darkMode ? 'var(--darkest-grey)' : 'var(--lighter-grey)',\n        highlightColor: darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)',\n        strokeWidth: 1,\n        mouseCursor: 'default'\n      },\n      node: {\n        labelProperty: 'displayName',\n        viewGenerator: node => /*#__PURE__*/React.createElement(CountryNode, {\n          node: node,\n          darkMode: darkMode,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 42\n          }\n        })\n      }\n    };\n    let nodes = {};\n    transmissions.forEach(trans => {\n      if (parseDate(trans.date) > parseDate(date)) return;\n\n      if (trans.from in nodes) {\n        nodes[trans.from] += 1;\n      } else {\n        nodes[trans.from] = 1;\n      }\n\n      if (trans.to in nodes) {\n        nodes[trans.to] += 0;\n      } else {\n        nodes[trans.to] = 0;\n      }\n    });\n    const data = {\n      nodes: Object.keys(nodes).map(x => ({\n        id: x,\n        displayName: this.getDisplayName(x),\n        size: Math.max(Math.min(nodes[x] * 20, 230), 150),\n        count: this.getCount(x),\n        color: this.getColor(x, darkMode),\n        labelFontSize: nodes[x] > 6 ? 9 : 0,\n        selected: currentRegion[currentRegion.length - 1] === x ? true : false\n      })),\n      links: transmissions.filter(trans => parseDate(trans.date) <= parseDate(date)).map(trans => ({\n        source: trans.from,\n        target: trans.to\n      }))\n    };\n    return /*#__PURE__*/React.createElement(Graph, {\n      id: \"transmission-network\" // id is mandatory, if no id is defined rd3g will throw an error\n      ,\n      data: data,\n      config: networkConfig,\n      onClickNode: id => regionToggle(this.getRegion(id)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/components/TransmissionNetwork.js"],"names":["React","Component","Graph","scaleSequential","scaleLog","scaleLinear","interpolateMagma","transmissions","maps","parseDate","getDataFromRegion","str","CountryNode","node","darkMode","selected","highlighted","backgroundColor","color","fontSize","id","labelFontSize","strokeWidth","TransmissionNetwork","getRegion","region","MAINLAND_CHINA_ZH","HONGKONG_ZH","MACAO_ZH","TAIWAN_ZH","includes","CHINA_ZH","DIAMOND_PRINCESS_ZH","INTL_CONVEYANCE_ZH","getCount","data","date","metric","props","regionData","count","getColor","currentScale","getScale","colorConvert","x","colorScale","d","scale","domain","TRANSMISSION","getDisplayName","lang","ENGLISH","render","mapDimensions","regionToggle","currentRegion","currentMap","networkConfig","directed","automaticRearrangeAfterDropNode","panAndZoom","minZoom","maxZoom","focusAnimationDuration","nodeHighlightBehavior","width","height","highlightOpacity","d3","gravity","linkLength","link","highlightColor","mouseCursor","labelProperty","viewGenerator","nodes","forEach","trans","from","to","Object","keys","map","displayName","size","Math","max","min","length","links","filter","source","target"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Graph } from 'react-d3-graph'\r\nimport { scaleSequential, scaleLog, scaleLinear } from 'd3-scale'\r\nimport { interpolateMagma } from 'd3-scale-chromatic'\r\nimport transmissions from '../data/transmissions.yml'\r\nimport maps from '../data/maps.yml'\r\nimport { parseDate, getDataFromRegion } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\n\r\nconst CountryNode = ({ node, darkMode }) => {\r\n    return (\r\n        <div\r\n            className={`country-node ${node.selected || node.highlighted ? 'selected' : ''}`}\r\n            style={{\r\n                backgroundColor: node.selected\r\n                    ? '#fff'\r\n                    : node.color ? node.color : darkMode ? 'var(--dark-grey)' : 'var(--lighter-grey)',\r\n                fontSize: node.fontSize\r\n            }}\r\n        >\r\n            <style>\r\n                {node.selected ? (\r\n                    `#${node.id} text {font-weight: bold; font-size: 14px; }`\r\n                ) : node.highlighted ? (\r\n                    `#${node.id} text {font-size: 9px; }`\r\n                ) : (\r\n                    `#${node.id} text {font-size: ${node.labelFontSize}px;}`\r\n                )}\r\n                {`.country-node.selected,.country-node:hover { border: solid ${node.strokeWidth}px ${darkMode\r\n                    ? 'var(--primary-color-4)'\r\n                    : 'var(--primary-color-5)'};}`}\r\n            </style>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default class TransmissionNetwork extends Component {\r\n    getRegion = (id) => {\r\n        const region = [ str.MAINLAND_CHINA_ZH, str.HONGKONG_ZH, str.MACAO_ZH, str.TAIWAN_ZH ].includes(id)\r\n            ? [ str.CHINA_ZH, id ]\r\n            : id === str.DIAMOND_PRINCESS_ZH ? [ str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH ] : [ id ]\r\n\r\n        return region\r\n    }\r\n\r\n    getCount = (id) => {\r\n        const { data, date, metric } = this.props\r\n        const regionData = getDataFromRegion(data, this.getRegion(id))\r\n        const count = regionData[metric][date] ? regionData[metric][date] : 0\r\n\r\n        return count\r\n    }\r\n\r\n    getColor = (id, darkMode) => {\r\n        const count = this.getCount(id)\r\n        const currentScale = this.getScale()\r\n        const colorConvert = (x) => (darkMode ? x * 0.95 + 0.05 : 0.95 - x * 0.95)\r\n        const colorScale = scaleSequential((d) => interpolateMagma(colorConvert(currentScale(d))))\r\n\r\n        return colorScale(count)\r\n    }\r\n\r\n    getScale = () => {\r\n        const { scale, metric } = this.props\r\n        const currentScale = scale === 'linear' ? scaleLinear : scaleLog\r\n        return currentScale().domain([ 1, maps[str.TRANSMISSION][`maxScale_${metric}`] ])\r\n    }\r\n\r\n    getDisplayName = (id) => {\r\n        const { lang, data } = this.props\r\n        return lang === 'zh' ? id : getDataFromRegion(data, this.getRegion(id)).ENGLISH\r\n    }\r\n\r\n    render() {\r\n        const { mapDimensions, date, regionToggle, currentRegion, currentMap, darkMode } = this.props\r\n\r\n        if (currentMap !== str.TRANSMISSION) return <div />\r\n\r\n        const networkConfig = {\r\n            directed: true,\r\n            automaticRearrangeAfterDropNode: true,\r\n            panAndZoom: true,\r\n            minZoom: 0.75,\r\n            maxZoom: 2,\r\n            focusAnimationDuration: 0.5,\r\n            nodeHighlightBehavior: true,\r\n            width: mapDimensions.width,\r\n            height: mapDimensions.height,\r\n            highlightOpacity: 0.2,\r\n            d3: {\r\n                gravity: -20,\r\n                linkLength: mapDimensions.width * 0.15\r\n            },\r\n            link: {\r\n                color: darkMode ? 'var(--darkest-grey)' : 'var(--lighter-grey)',\r\n                highlightColor: darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)',\r\n                strokeWidth: 1,\r\n                mouseCursor: 'default'\r\n            },\r\n            node: {\r\n                labelProperty: 'displayName',\r\n                viewGenerator: (node) => <CountryNode node={node} darkMode={darkMode} />\r\n            }\r\n        }\r\n\r\n        let nodes = {}\r\n        transmissions.forEach((trans) => {\r\n            if (parseDate(trans.date) > parseDate(date)) return\r\n\r\n            if (trans.from in nodes) {\r\n                nodes[trans.from] += 1\r\n            } else {\r\n                nodes[trans.from] = 1\r\n            }\r\n            if (trans.to in nodes) {\r\n                nodes[trans.to] += 0\r\n            } else {\r\n                nodes[trans.to] = 0\r\n            }\r\n        })\r\n\r\n        const data = {\r\n            nodes: Object.keys(nodes).map((x) => ({\r\n                id: x,\r\n                displayName: this.getDisplayName(x),\r\n                size: Math.max(Math.min(nodes[x] * 20, 230), 150),\r\n                count: this.getCount(x),\r\n                color: this.getColor(x, darkMode),\r\n                labelFontSize: nodes[x] > 6 ? 9 : 0,\r\n                selected: currentRegion[currentRegion.length - 1] === x ? true : false\r\n            })),\r\n            links: transmissions\r\n                .filter((trans) => parseDate(trans.date) <= parseDate(date))\r\n                .map((trans) => ({ source: trans.from, target: trans.to }))\r\n        }\r\n\r\n        return (\r\n            <Graph\r\n                id=\"transmission-network\" // id is mandatory, if no id is defined rd3g will throw an error\r\n                data={data}\r\n                config={networkConfig}\r\n                onClickNode={(id) => regionToggle(this.getRegion(id))}\r\n            />\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}