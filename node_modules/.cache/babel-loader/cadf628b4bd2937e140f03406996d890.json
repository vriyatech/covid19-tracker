{"ast":null,"code":"import _toConsumableArray from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import addDays from'date-fns/addDays';import subDays from'date-fns/subDays';import format from'date-fns/format';import zhCN from'date-fns/locale/zh-CN';import i18n from'../data/i18n.yml';import*as str from'./strings';export var parseDate=function parseDate(date){var _date$substr$split=date.substr(0,10).split('-'),_date$substr$split2=_slicedToArray(_date$substr$split,3),year=_date$substr$split2[0],month=_date$substr$split2[1],day=_date$substr$split2[2];return new Date(year,month-1,day);};export var nextDay=function nextDay(date,startDate,endDate){var newDay=addDays(parseDate(date),1);var lastDay=parseDate(endDate);return newDay<=lastDay?format(newDay,'yyyy-MM-dd'):startDate;};export var previousDay=function previousDay(date,startDate,endDate){var newDay=subDays(parseDate(date),1);var firstDay=parseDate(startDate);return newDay>=firstDay?format(newDay,'yyyy-MM-dd'):endDate;};export var formatDate=function formatDate(date,lang){if(lang==='zh'){return format(parseDate(date),'yyyy MMM d',{locale:zhCN});}else{return format(parseDate(date),'MMM d, yyyy');}};export var metricText={confirmedCount:i18n.CONFIRMED,deadCount:i18n.DEATHS,curedCount:i18n.RECOVERED,fatalityRate:i18n.FATALITY_RATE,recoveryRate:i18n.RECOVERY_RATE};export var getDataFromRegion=function getDataFromRegion(data,region){return[data].concat(_toConsumableArray(region)).reduce(function(s,x){return s[x];});};export var simplifyName=function simplifyName(name,lang){var simplified=name;// remove parenthesis to save space for legend\nif(lang==='en')simplified=name.split('(')[0].trim();if(lang==='en')simplified=simplified.replace('United States of America','USA');if(lang==='en')simplified=simplified.replace('United Kingdom','UK');if(lang==='en')simplified=simplified.replace('International Conveyance',\"Int'l Conveyance\");if(lang==='en')simplified=simplified.replace(' District','');if(lang==='en')simplified=simplified.replace(' County','');if(lang==='zh')simplified=simplified.replace('（来自钻石公主号）','').trim();return simplified;};export var updateDarkMode=function updateDarkMode(isDarkMode){document.body.style.background=!isDarkMode?'#fff':'var(--darker-grey)';if(isDarkMode){document.body.classList.add('dark');}else{document.body.classList.remove('dark');}};export var generateTreeData=function generateTreeData(obj,date,lang){var simplified=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var childrenLabel=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'children';var sortBy=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;var rootRegion=arguments.length>6&&arguments[6]!==undefined?arguments[6]:str.GLOBAL_ZH;var data=Object.entries(obj).filter(function(_ref){var _ref2=_slicedToArray(_ref,2),k=_ref2[0],v=_ref2[1];return!['confirmedCount','deadCount','curedCount','ENGLISH',str.GLOBAL_ZH].includes(k);}).map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),k=_ref4[0],v=_ref4[1];var currentRegion=rootRegion===str.GLOBAL_ZH?k:\"\".concat(rootRegion,\".\").concat(k);var newdata={name:k,displayName:lang==='zh'?k:v.ENGLISH,region:currentRegion,confirmedCount:Object.keys(v.confirmedCount).length===0?'—':v.confirmedCount[date]?v.confirmedCount[date]:0,deadCount:Object.keys(v.deadCount).length===0?'—':v.deadCount[date]?v.deadCount[date]:0,curedCount:Object.keys(v.curedCount).length===0?'—':v.curedCount[date]?v.curedCount[date]:0};// remove some regions for the simplicity of bubble plot\nif(simplified&&(k===str.LONDON_EN||obj.ENGLISH===str.NETHERLANDS_EN&&k===str.NETHERLANDS_ZH||obj.ENGLISH===str.US_EN)){return newdata;}if(Object.keys(v).length>4){newdata[childrenLabel]=generateTreeData(v,date,lang,simplified,childrenLabel,sortBy,currentRegion);}return newdata;});return sortBy?data.sort(function(a,b){return a[sortBy]<b[sortBy]?1:-1;}):data;};","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/utils/utils.js"],"names":["addDays","subDays","format","zhCN","i18n","str","parseDate","date","substr","split","year","month","day","Date","nextDay","startDate","endDate","newDay","lastDay","previousDay","firstDay","formatDate","lang","locale","metricText","confirmedCount","CONFIRMED","deadCount","DEATHS","curedCount","RECOVERED","fatalityRate","FATALITY_RATE","recoveryRate","RECOVERY_RATE","getDataFromRegion","data","region","reduce","s","x","simplifyName","name","simplified","trim","replace","updateDarkMode","isDarkMode","document","body","style","background","classList","add","remove","generateTreeData","obj","childrenLabel","sortBy","rootRegion","GLOBAL_ZH","Object","entries","filter","k","v","includes","map","currentRegion","newdata","displayName","ENGLISH","keys","length","LONDON_EN","NETHERLANDS_EN","NETHERLANDS_ZH","US_EN","sort","a","b"],"mappings":"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","sourcesContent":["import addDays from 'date-fns/addDays'\r\nimport subDays from 'date-fns/subDays'\r\nimport format from 'date-fns/format'\r\nimport zhCN from 'date-fns/locale/zh-CN'\r\nimport i18n from '../data/i18n.yml'\r\nimport * as str from './strings'\r\n\r\nexport const parseDate = (date) => {\r\n    const [ year, month, day ] = date.substr(0, 10).split('-')\r\n    return new Date(year, month - 1, day)\r\n}\r\n\r\nexport const nextDay = (date, startDate, endDate) => {\r\n    const newDay = addDays(parseDate(date), 1)\r\n    const lastDay = parseDate(endDate)\r\n    return newDay <= lastDay ? format(newDay, 'yyyy-MM-dd') : startDate\r\n}\r\n\r\nexport const previousDay = (date, startDate, endDate) => {\r\n    const newDay = subDays(parseDate(date), 1)\r\n    const firstDay = parseDate(startDate)\r\n    return newDay >= firstDay ? format(newDay, 'yyyy-MM-dd') : endDate\r\n}\r\n\r\nexport const formatDate = (date, lang) => {\r\n    if (lang === 'zh') {\r\n        return format(parseDate(date), 'yyyy MMM d', { locale: zhCN })\r\n    } else {\r\n        return format(parseDate(date), 'MMM d, yyyy')\r\n    }\r\n}\r\n\r\nexport const metricText = {\r\n    confirmedCount: i18n.CONFIRMED,\r\n    deadCount: i18n.DEATHS,\r\n    curedCount: i18n.RECOVERED,\r\n    fatalityRate: i18n.FATALITY_RATE,\r\n    recoveryRate: i18n.RECOVERY_RATE\r\n}\r\n\r\nexport const getDataFromRegion = (data, region) => [ data, ...region ].reduce((s, x) => s[x])\r\n\r\nexport const simplifyName = (name, lang) => {\r\n    let simplified = name\r\n    // remove parenthesis to save space for legend\r\n    if (lang === 'en') simplified = name.split('(')[0].trim()\r\n\r\n    if (lang === 'en') simplified = simplified.replace('United States of America', 'USA')\r\n    if (lang === 'en') simplified = simplified.replace('United Kingdom', 'UK')\r\n    if (lang === 'en') simplified = simplified.replace('International Conveyance', \"Int'l Conveyance\")\r\n    if (lang === 'en') simplified = simplified.replace(' District', '')\r\n    if (lang === 'en') simplified = simplified.replace(' County', '')\r\n    if (lang === 'zh') simplified = simplified.replace('（来自钻石公主号）', '').trim()\r\n\r\n    return simplified\r\n}\r\n\r\nexport const updateDarkMode = (isDarkMode) => {\r\n    document.body.style.background = !isDarkMode ? '#fff' : 'var(--darker-grey)'\r\n    if (isDarkMode) {\r\n        document.body.classList.add('dark')\r\n    } else {\r\n        document.body.classList.remove('dark')\r\n    }\r\n}\r\n\r\nexport const generateTreeData = (\r\n    obj,\r\n    date,\r\n    lang,\r\n    simplified = true,\r\n    childrenLabel = 'children',\r\n    sortBy = null,\r\n    rootRegion = str.GLOBAL_ZH\r\n) => {\r\n    let data = Object.entries(obj)\r\n        .filter(([ k, v ]) => ![ 'confirmedCount', 'deadCount', 'curedCount', 'ENGLISH', str.GLOBAL_ZH ].includes(k))\r\n        .map(([ k, v ]) => {\r\n            const currentRegion = rootRegion === str.GLOBAL_ZH ? k : `${rootRegion}.${k}`\r\n            let newdata = {\r\n                name: k,\r\n                displayName: lang === 'zh' ? k : v.ENGLISH,\r\n                region: currentRegion,\r\n                confirmedCount:\r\n                    Object.keys(v.confirmedCount).length === 0\r\n                        ? '—'\r\n                        : v.confirmedCount[date] ? v.confirmedCount[date] : 0,\r\n                deadCount: Object.keys(v.deadCount).length === 0 ? '—' : v.deadCount[date] ? v.deadCount[date] : 0,\r\n                curedCount: Object.keys(v.curedCount).length === 0 ? '—' : v.curedCount[date] ? v.curedCount[date] : 0\r\n            }\r\n\r\n            // remove some regions for the simplicity of bubble plot\r\n            if (\r\n                simplified &&\r\n                (k === str.LONDON_EN ||\r\n                    (obj.ENGLISH === str.NETHERLANDS_EN && k === str.NETHERLANDS_ZH) ||\r\n                    obj.ENGLISH === str.US_EN)\r\n            ) {\r\n                return newdata\r\n            }\r\n\r\n            if (Object.keys(v).length > 4) {\r\n                newdata[childrenLabel] = generateTreeData(\r\n                    v,\r\n                    date,\r\n                    lang,\r\n                    simplified,\r\n                    childrenLabel,\r\n                    sortBy,\r\n                    currentRegion\r\n                )\r\n            }\r\n            return newdata\r\n        })\r\n\r\n    return sortBy ? data.sort((a, b) => (a[sortBy] < b[sortBy] ? 1 : -1)) : data\r\n}\r\n"]},"metadata":{},"sourceType":"module"}