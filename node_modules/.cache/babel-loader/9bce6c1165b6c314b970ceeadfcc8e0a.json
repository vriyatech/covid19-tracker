{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\src\\\\components\\\\DateSlider.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Slider, Rail, Handles, Tracks, Ticks } from 'react-compound-slider';\nimport format from 'date-fns/format';\nimport { scaleTime } from 'd3-scale';\nimport { timeDay } from 'd3-time';\nimport { parseDate } from '../utils/utils';\n\nfunction formatTick(ms) {\n  return format(new Date(ms), 'M/d');\n}\n\nexport default class DateSlider extends Component {\n  render() {\n    const {\n      date,\n      startDate,\n      endDate,\n      handleDateChange,\n      handleTempDateChange,\n      fullMap,\n      fullPlot,\n      plotDates\n    } = this.props;\n    const min = parseDate(startDate);\n    const max = parseDate(endDate);\n    const numberOfDays = (max - min) / (1000 * 3600 * 24);\n    const dateTicksInterval = Math.round(numberOfDays / (!fullMap ? 10 : 15));\n    const dateTicks = scaleTime().domain([min, max]).ticks( // hack to fix unwanted behavior (https://github.com/d3/d3/issues/2240)\n    timeDay.filter(function (d) {\n      return timeDay.count(0, d) % dateTicksInterval === 0;\n    })).map(d => +d);\n    return /*#__PURE__*/React.createElement(Slider, {\n      className: \"date-slider\",\n      mode: 1,\n      step: 1000 * 60 * 60 * 24,\n      domain: [+min, +max],\n      onChange: time => {\n        if (!fullPlot) handleDateChange(format(time[0], 'yyyy-MM-dd'));\n      },\n      onUpdate: handleTempDateChange,\n      values: !fullPlot ? [+parseDate(date)] : plotDates.map(x => +parseDate(x)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Rail, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, ({\n      getRailProps\n    }) => /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      className: \"date-slider-rail-outer\"\n    }, getRailProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"date-slider-rail-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(Handles, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, ({\n      handles,\n      getHandleProps\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }, handles.map((handle, index) => /*#__PURE__*/React.createElement(Fragment, {\n      key: `handle-${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      className: \"date-slider-handle-outer\",\n      style: {\n        left: `${handle.percent}%`\n      }\n    }, getHandleProps(handle.id), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      role: \"slider\",\n      className: \"date-slider-handle-inner\" // eslint-disable-next-line\n      ,\n      \"aria-valuemin\": +min // eslint-disable-next-line\n      ,\n      \"aria-valuemax\": +max,\n      \"aria-valuenow\": handle.value,\n      style: {\n        left: `${handle.percent}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 37\n      }\n    }))))), /*#__PURE__*/React.createElement(Tracks, {\n      left: !fullPlot,\n      right: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, ({\n      tracks,\n      getTrackProps\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, tracks.map(({\n      id,\n      source,\n      target\n    }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n      key: `track-${id}`,\n      className: \"date-slider-track\",\n      style: {\n        left: `${source.percent}%`,\n        width: `${target.percent - source.percent}%`\n      }\n    }, getTrackProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 33\n      }\n    }))))), /*#__PURE__*/React.createElement(Ticks, {\n      values: dateTicks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, ({\n      ticks\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }, ticks.map((tick, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: `tick-${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"date-slider-tick\",\n      style: {\n        left: `${tick.percent}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"date-slider-tick-text\",\n      style: {\n        marginLeft: `${-(100 / ticks.length) / 2}%`,\n        width: `${100 / ticks.length}%`,\n        left: `${tick.percent}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 37\n      }\n    }, formatTick(tick.value)))))));\n  }\n\n}","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/components/DateSlider.js"],"names":["React","Component","Fragment","Slider","Rail","Handles","Tracks","Ticks","format","scaleTime","timeDay","parseDate","formatTick","ms","Date","DateSlider","render","date","startDate","endDate","handleDateChange","handleTempDateChange","fullMap","fullPlot","plotDates","props","min","max","numberOfDays","dateTicksInterval","Math","round","dateTicks","domain","ticks","filter","d","count","map","time","x","getRailProps","handles","getHandleProps","handle","index","left","percent","id","value","tracks","getTrackProps","source","target","width","tick","marginLeft","length"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport { Slider, Rail, Handles, Tracks, Ticks } from 'react-compound-slider'\r\nimport format from 'date-fns/format'\r\nimport { scaleTime } from 'd3-scale'\r\nimport { timeDay } from 'd3-time'\r\nimport { parseDate } from '../utils/utils'\r\n\r\nfunction formatTick(ms) {\r\n    return format(new Date(ms), 'M/d')\r\n}\r\n\r\nexport default class DateSlider extends Component {\r\n    render() {\r\n        const {\r\n            date,\r\n            startDate,\r\n            endDate,\r\n            handleDateChange,\r\n            handleTempDateChange,\r\n            fullMap,\r\n            fullPlot,\r\n            plotDates\r\n        } = this.props\r\n        const min = parseDate(startDate)\r\n        const max = parseDate(endDate)\r\n\r\n        const numberOfDays = (max - min) / (1000 * 3600 * 24)\r\n        const dateTicksInterval = Math.round(numberOfDays / (!fullMap ? 10 : 15))\r\n\r\n        const dateTicks = scaleTime()\r\n            .domain([ min, max ])\r\n            .ticks(\r\n                // hack to fix unwanted behavior (https://github.com/d3/d3/issues/2240)\r\n                timeDay.filter(function(d) {\r\n                    return timeDay.count(0, d) % dateTicksInterval === 0\r\n                })\r\n            )\r\n            .map((d) => +d)\r\n\r\n        return (\r\n            <Slider\r\n                className=\"date-slider\"\r\n                mode={1}\r\n                step={1000 * 60 * 60 * 24}\r\n                domain={[ +min, +max ]}\r\n                onChange={(time) => {\r\n                    if (!fullPlot) handleDateChange(format(time[0], 'yyyy-MM-dd'))\r\n                }}\r\n                onUpdate={handleTempDateChange}\r\n                values={!fullPlot ? [ +parseDate(date) ] : plotDates.map((x) => +parseDate(x))}\r\n            >\r\n                <Rail>\r\n                    {({ getRailProps }) => (\r\n                        <Fragment>\r\n                            <div className=\"date-slider-rail-outer\" {...getRailProps()} />\r\n                            <div className=\"date-slider-rail-inner\" />\r\n                        </Fragment>\r\n                    )}\r\n                </Rail>\r\n                <Handles>\r\n                    {({ handles, getHandleProps }) => (\r\n                        <div>\r\n                            {handles.map((handle, index) => (\r\n                                <Fragment key={`handle-${index}`}>\r\n                                    <div\r\n                                        className=\"date-slider-handle-outer\"\r\n                                        style={{\r\n                                            left: `${handle.percent}%`\r\n                                        }}\r\n                                        {...getHandleProps(handle.id)}\r\n                                    />\r\n                                    <div\r\n                                        role=\"slider\"\r\n                                        className=\"date-slider-handle-inner\"\r\n                                        // eslint-disable-next-line\r\n                                        aria-valuemin={+min}\r\n                                        // eslint-disable-next-line\r\n                                        aria-valuemax={+max}\r\n                                        aria-valuenow={handle.value}\r\n                                        style={{\r\n                                            left: `${handle.percent}%`\r\n                                        }}\r\n                                    />\r\n                                </Fragment>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </Handles>\r\n                <Tracks left={!fullPlot} right={false}>\r\n                    {({ tracks, getTrackProps }) => (\r\n                        <div>\r\n                            {tracks.map(({ id, source, target }) => (\r\n                                <div\r\n                                    key={`track-${id}`}\r\n                                    className=\"date-slider-track\"\r\n                                    style={{\r\n                                        left: `${source.percent}%`,\r\n                                        width: `${target.percent - source.percent}%`\r\n                                    }}\r\n                                    {...getTrackProps()}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </Tracks>\r\n                <Ticks values={dateTicks}>\r\n                    {({ ticks }) => (\r\n                        <div>\r\n                            {ticks.map((tick, index) => (\r\n                                <div key={`tick-${index}`}>\r\n                                    <div\r\n                                        className=\"date-slider-tick\"\r\n                                        style={{\r\n                                            left: `${tick.percent}%`\r\n                                        }}\r\n                                    />\r\n                                    <div\r\n                                        className=\"date-slider-tick-text\"\r\n                                        style={{\r\n                                            marginLeft: `${-(100 / ticks.length) / 2}%`,\r\n                                            width: `${100 / ticks.length}%`,\r\n                                            left: `${tick.percent}%`\r\n                                        }}\r\n                                    >\r\n                                        {formatTick(tick.value)}\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </Ticks>\r\n            </Slider>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}