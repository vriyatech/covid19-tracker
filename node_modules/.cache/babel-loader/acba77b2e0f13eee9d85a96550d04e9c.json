{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming\\\\react\\\\new covid\\\\covid19\\\\src\\\\components\\\\Table.js\";\nimport React, { Component } from 'react';\nimport { AiFillCaretRight, AiFillCaretDown } from 'react-icons/ai';\nimport RawTable from './RawTable';\nimport { generateTreeData } from '../utils/utils';\nimport * as str from '../utils/strings';\nimport i18n from '../data/i18n.yml';\nexport default class Table extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onRowClick = row => {\n      this.props.regionToggle(row.original.region.split('.'));\n    };\n\n    this.highlightCurrentRegion = () => {\n      document.querySelectorAll('.data-table tr').forEach(x => x.classList.remove('current')); // hack\n\n      setTimeout(() => {\n        const elem = document.getElementById(`table-${this.props.currentRegion.join('.')}`);\n        const tbodyElem = document.querySelector('.data-table tbody'); // scroll into view if the row is not visible\n\n        if (elem != null && tbodyElem != null) {\n          elem.classList.add('current');\n          const bounding = elem.getBoundingClientRect();\n          const tableBounding = tbodyElem.getBoundingClientRect();\n          const isInViewPort = bounding.top >= tableBounding.top && bounding.bottom <= tableBounding.bottom;\n          if (!isInViewPort) tbodyElem.scrollTop = elem.offsetTop - tbodyElem.offsetTop;\n        }\n      }, 200);\n    };\n\n    this.getInitialSate = tableData => {\n      const {\n        currentRegion,\n        playing\n      } = this.props;\n      if (currentRegion[0] === str.GLOBAL_ZH && playing) return {};\n      let indices = [];\n      currentRegion.slice(0, currentRegion.length - 1).forEach(r => {\n        const regionData = indices.reduce((s, x) => Array.isArray(s) ? s[x] : s.subRows[x], tableData);\n        const subregions = Array.isArray(regionData) ? regionData : regionData.subRows;\n        const newIdx = subregions.findIndex(x => x.name === r);\n        indices.push(newIdx);\n      });\n      const expanded = indices.map((x, i) => indices.slice(0, i + 1).join('.')).reduce((s, x) => {\n        s[x] = true;\n        return s;\n      }, {});\n      return {\n        expanded\n      };\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentRegion.join('.') !== this.props.currentRegion.join('.')) this.highlightCurrentRegion();\n  }\n\n  componentDidMount() {\n    this.highlightCurrentRegion();\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.lang !== this.props.lang || nextProps.date !== this.props.date || nextProps.currentRegion !== this.props.currentRegion;\n  }\n\n  render() {\n    const {\n      data,\n      lang,\n      date\n    } = this.props;\n    if (data == null) return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 34\n      }\n    });\n    const tableData = generateTreeData(data, date, lang, false, 'subRows', 'confirmedCount');\n    const columns = [{\n      // Build our expander column\n      id: 'expander',\n      // Make sure it has an ID\n      Header: ({\n        getToggleAllRowsExpandedProps,\n        isAllRowsExpanded\n      }) => /*#__PURE__*/React.createElement(\"span\", Object.assign({}, getToggleAllRowsExpandedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }), isAllRowsExpanded ? /*#__PURE__*/React.createElement(AiFillCaretDown, {\n        size: 14,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 46\n        }\n      }) : /*#__PURE__*/React.createElement(AiFillCaretRight, {\n        size: 14,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 78\n        }\n      })),\n      Cell: ({\n        row\n      }) => // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n      // to build the toggle for expanding a row\n      row.canExpand ? /*#__PURE__*/React.createElement(\"span\", Object.assign({}, row.getToggleRowExpandedProps({\n        style: {\n          // We can even use the row.depth property\n          // and paddingLeft to indicate the depth\n          // of the row\n          paddingLeft: 0\n        }\n      }), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }\n      }), row.isExpanded ? /*#__PURE__*/React.createElement(AiFillCaretDown, {\n        size: 14,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 47\n        }\n      }) : /*#__PURE__*/React.createElement(AiFillCaretRight, {\n        size: 14,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 79\n        }\n      })) : null\n    }, {\n      Header: i18n.REGION[lang],\n      Cell: ({\n        row\n      }) => {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }\n        }, `${[...Array(row.depth + 1).keys()].map(x => 'ã€€').join('')}${row.original.displayName}`);\n      },\n      accessor: 'displayName'\n    }, {\n      Header: i18n.CONFIRMED[lang],\n      accessor: 'confirmedCount'\n    }, {\n      Header: i18n.RECOVERED[lang],\n      accessor: 'curedCount'\n    }, {\n      Header: i18n.DEATHS[lang],\n      accessor: 'deadCount'\n    }];\n    const initialState = this.getInitialSate(tableData);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(RawTable, {\n      columns: columns,\n      data: tableData,\n      initialState: initialState,\n      onRowClick: this.onRowClick,\n      filterPlaceholder: `${i18n.SEARCH[lang]} ...`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/src/components/Table.js"],"names":["React","Component","AiFillCaretRight","AiFillCaretDown","RawTable","generateTreeData","str","i18n","Table","onRowClick","row","props","regionToggle","original","region","split","highlightCurrentRegion","document","querySelectorAll","forEach","x","classList","remove","setTimeout","elem","getElementById","currentRegion","join","tbodyElem","querySelector","add","bounding","getBoundingClientRect","tableBounding","isInViewPort","top","bottom","scrollTop","offsetTop","getInitialSate","tableData","playing","GLOBAL_ZH","indices","slice","length","r","regionData","reduce","s","Array","isArray","subRows","subregions","newIdx","findIndex","name","push","expanded","map","i","componentDidUpdate","prevProps","componentDidMount","shouldComponentUpdate","nextProps","lang","date","render","data","columns","id","Header","getToggleAllRowsExpandedProps","isAllRowsExpanded","Cell","canExpand","getToggleRowExpandedProps","style","paddingLeft","isExpanded","REGION","depth","keys","displayName","accessor","CONFIRMED","RECOVERED","DEATHS","initialState","height","SEARCH"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { AiFillCaretRight, AiFillCaretDown } from 'react-icons/ai'\r\nimport RawTable from './RawTable'\r\nimport { generateTreeData } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nexport default class Table extends Component {\r\n    onRowClick = (row) => {\r\n        this.props.regionToggle(row.original.region.split('.'))\r\n    }\r\n\r\n    highlightCurrentRegion = () => {\r\n        document.querySelectorAll('.data-table tr').forEach((x) => x.classList.remove('current'))\r\n        // hack\r\n        setTimeout(() => {\r\n            const elem = document.getElementById(`table-${this.props.currentRegion.join('.')}`)\r\n            const tbodyElem = document.querySelector('.data-table tbody')\r\n\r\n            // scroll into view if the row is not visible\r\n            if (elem != null && tbodyElem != null) {\r\n                elem.classList.add('current')\r\n                const bounding = elem.getBoundingClientRect()\r\n                const tableBounding = tbodyElem.getBoundingClientRect()\r\n                const isInViewPort = bounding.top >= tableBounding.top && bounding.bottom <= tableBounding.bottom\r\n\r\n                if (!isInViewPort) tbodyElem.scrollTop = elem.offsetTop - tbodyElem.offsetTop\r\n            }\r\n        }, 200)\r\n    }\r\n\r\n    getInitialSate = (tableData) => {\r\n        const { currentRegion, playing } = this.props\r\n        if (currentRegion[0] === str.GLOBAL_ZH && playing) return {}\r\n\r\n        let indices = []\r\n        currentRegion.slice(0, currentRegion.length - 1).forEach((r) => {\r\n            const regionData = indices.reduce((s, x) => (Array.isArray(s) ? s[x] : s.subRows[x]), tableData)\r\n            const subregions = Array.isArray(regionData) ? regionData : regionData.subRows\r\n            const newIdx = subregions.findIndex((x) => x.name === r)\r\n            indices.push(newIdx)\r\n        })\r\n        const expanded = indices.map((x, i) => indices.slice(0, i + 1).join('.')).reduce((s, x) => {\r\n            s[x] = true\r\n            return s\r\n        }, {})\r\n\r\n        return {\r\n            expanded\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.currentRegion.join('.') !== this.props.currentRegion.join('.')) this.highlightCurrentRegion()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.highlightCurrentRegion()\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return (\r\n            nextProps.lang !== this.props.lang ||\r\n            nextProps.date !== this.props.date ||\r\n            nextProps.currentRegion !== this.props.currentRegion\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { data, lang, date } = this.props\r\n        if (data == null) return <div />\r\n        const tableData = generateTreeData(data, date, lang, false, 'subRows', 'confirmedCount')\r\n\r\n        const columns = [\r\n            {\r\n                // Build our expander column\r\n                id: 'expander', // Make sure it has an ID\r\n                Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n                    <span {...getToggleAllRowsExpandedProps()}>\r\n                        {isAllRowsExpanded ? <AiFillCaretDown size={14} /> : <AiFillCaretRight size={14} />}\r\n                    </span>\r\n                ),\r\n                Cell: ({ row }) =>\r\n                    // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n                    // to build the toggle for expanding a row\r\n                    row.canExpand ? (\r\n                        <span\r\n                            {...row.getToggleRowExpandedProps({\r\n                                style: {\r\n                                    // We can even use the row.depth property\r\n                                    // and paddingLeft to indicate the depth\r\n                                    // of the row\r\n                                    paddingLeft: 0\r\n                                }\r\n                            })}\r\n                        >\r\n                            {row.isExpanded ? <AiFillCaretDown size={14} /> : <AiFillCaretRight size={14} />}\r\n                        </span>\r\n                    ) : null\r\n            },\r\n            {\r\n                Header: i18n.REGION[lang],\r\n                Cell: ({ row }) => {\r\n                    return (\r\n                        <span>{`${[ ...Array(row.depth + 1).keys() ].map((x) => 'ã€€').join('')}${row.original\r\n                            .displayName}`}</span>\r\n                    )\r\n                },\r\n                accessor: 'displayName'\r\n            },\r\n            {\r\n                Header: i18n.CONFIRMED[lang],\r\n                accessor: 'confirmedCount'\r\n            },\r\n            {\r\n                Header: i18n.RECOVERED[lang],\r\n                accessor: 'curedCount'\r\n            },\r\n            {\r\n                Header: i18n.DEATHS[lang],\r\n                accessor: 'deadCount'\r\n            }\r\n        ]\r\n\r\n        const initialState = this.getInitialSate(tableData)\r\n\r\n        return (\r\n            <div style={{ height: '100%' }}>\r\n                <RawTable\r\n                    columns={columns}\r\n                    data={tableData}\r\n                    initialState={initialState}\r\n                    onRowClick={this.onRowClick}\r\n                    filterPlaceholder={`${i18n.SEARCH[lang]} ...`}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}