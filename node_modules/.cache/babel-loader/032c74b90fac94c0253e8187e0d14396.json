{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar Ticks = /*#__PURE__*/function (_Component) {\n  _inherits(Ticks, _Component);\n\n  function Ticks() {\n    _classCallCheck(this, Ticks);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Ticks).apply(this, arguments));\n  }\n\n  _createClass(Ticks, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          values = _this$props.values,\n          scale = _this$props.scale,\n          count = _this$props.count,\n          getEventData = _this$props.getEventData,\n          activeHandleID = _this$props.activeHandleID;\n      var ticks = (values ? values : scale.getTicks(count)).map(function (value) {\n        return {\n          id: \"$$-\".concat(value),\n          value: value,\n          percent: scale.getValue(value)\n        };\n      });\n      var renderedChildren = children({\n        getEventData: getEventData,\n        activeHandleID: activeHandleID,\n        ticks: ticks\n      });\n      return renderedChildren && React.Children.only(renderedChildren);\n    }\n  }]);\n\n  return Ticks;\n}(Component);\n\nTicks.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** @ignore */\n  scale: PropTypes.object,\n\n  /**\n   * Approximate number of ticks you want to render.\n   * If you supply your own ticks using the values prop this prop has no effect.\n   */\n  count: PropTypes.number,\n\n  /**\n   * The values prop should be an array of unique numbers.\n   * Use this prop if you want to specify your own tick values instead of ticks generated by the slider.\n   * The numbers should be valid numbers in the domain and correspond to the step value.\n   * Invalid values will be coerced to the closet matching value in the domain.\n   */\n  values: PropTypes.array,\n\n  /** @ignore */\n  getEventData: PropTypes.func,\n\n  /** @ignore */\n  activeHandleID: PropTypes.string,\n\n  /** @ignore */\n  emitMouse: PropTypes.func,\n\n  /** @ignore */\n  emitTouch: PropTypes.func,\n\n  /**\n   * A function to render the ticks.\n   * The function receives an object with an array of ticks. Note: `getEventData` can be called with an event and get the value and percent at that location (used for tooltips etc). `activeHandleID` will be a string or null.  Function signature:\n   * `({ getEventData, activeHandleID, ticks  }): element`\n   */\n  children: PropTypes.func.isRequired\n} : {};\nTicks.defaultProps = {\n  count: 10\n};\nexport default Ticks;","map":{"version":3,"sources":["D:/programming/react/new covid/covid19/node_modules/react-compound-slider/es/Ticks/Ticks.js"],"names":["_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_inherits","React","Component","PropTypes","Ticks","_Component","apply","arguments","key","value","render","_this$props","props","children","values","scale","count","getEventData","activeHandleID","ticks","getTicks","map","id","concat","percent","getValue","renderedChildren","Children","only","propTypes","process","env","NODE_ENV","object","number","array","func","string","emitMouse","emitTouch","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar Ticks =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Ticks, _Component);\n\n  function Ticks() {\n    _classCallCheck(this, Ticks);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Ticks).apply(this, arguments));\n  }\n\n  _createClass(Ticks, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          values = _this$props.values,\n          scale = _this$props.scale,\n          count = _this$props.count,\n          getEventData = _this$props.getEventData,\n          activeHandleID = _this$props.activeHandleID;\n      var ticks = (values ? values : scale.getTicks(count)).map(function (value) {\n        return {\n          id: \"$$-\".concat(value),\n          value: value,\n          percent: scale.getValue(value)\n        };\n      });\n      var renderedChildren = children({\n        getEventData: getEventData,\n        activeHandleID: activeHandleID,\n        ticks: ticks\n      });\n      return renderedChildren && React.Children.only(renderedChildren);\n    }\n  }]);\n\n  return Ticks;\n}(Component);\n\nTicks.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** @ignore */\n  scale: PropTypes.object,\n\n  /**\n   * Approximate number of ticks you want to render.\n   * If you supply your own ticks using the values prop this prop has no effect.\n   */\n  count: PropTypes.number,\n\n  /**\n   * The values prop should be an array of unique numbers.\n   * Use this prop if you want to specify your own tick values instead of ticks generated by the slider.\n   * The numbers should be valid numbers in the domain and correspond to the step value.\n   * Invalid values will be coerced to the closet matching value in the domain.\n   */\n  values: PropTypes.array,\n\n  /** @ignore */\n  getEventData: PropTypes.func,\n\n  /** @ignore */\n  activeHandleID: PropTypes.string,\n\n  /** @ignore */\n  emitMouse: PropTypes.func,\n\n  /** @ignore */\n  emitTouch: PropTypes.func,\n\n  /**\n   * A function to render the ticks.\n   * The function receives an object with an array of ticks. Note: `getEventData` can be called with an event and get the value and percent at that location (used for tooltips etc). `activeHandleID` will be a string or null.  Function signature:\n   * `({ getEventData, activeHandleID, ticks  }): element`\n   */\n  children: PropTypes.func.isRequired\n} : {};\nTicks.defaultProps = {\n  count: 10\n};\nexport default Ticks;"]},"metadata":{},"sourceType":"module"}