import { HSL, HSLA, HSV, HSVA, RGB, RGBA, Numberify } from './interfaces';
export interface TinyColorOptions {
    format: string;
    gradientType: string;
}
export declare type ColorInput = string | RGB | RGBA | HSL | HSLA | HSV | HSVA | TinyColor;
export declare type ColorFormats = 'rgb' | 'prgb' | 'hex' | 'hex3' | 'hex4' | 'hex6' | 'hex8' | 'name' | 'hsl' | 'hsv';
export declare class TinyColor {
    r: number;
    g: number;
    b: number;
    a: number;
    format: ColorFormats;
    originalInput: ColorInput;
    isValid: boolean;
    gradientType?: string;
    roundA: number;
    constructor(color?: ColorInput, opts?: Partial<TinyColorOptions>);
    isDark(): boolean;
    isLight(): boolean;
    getBrightness(): number;
    getLuminance(): number;
    getAlpha(): number;
    setAlpha(alpha?: string | number): TinyColor;
    toHsv(): Numberify<HSVA>;
    toHsvString(): string;
    toHsl(): Numberify<HSLA>;
    toHslString(): string;
    toHex(allow3Char?: boolean): string;
    toHexString(allow3Char?: boolean): string;
    toHex8(allow4Char?: boolean): string;
    toHex8String(allow4Char?: boolean): string;
    toRgb(): Numberify<RGBA>;
    toRgbString(): string;
    toPercentageRgb(): RGBA;
    toPercentageRgbString(): string;
    toName(): string | false;
    toString(format?: ColorFormats): string | false;
    clone(): TinyColor;
    lighten(amount?: number): TinyColor;
    brighten(amount?: number): TinyColor;
    darken(amount?: number): TinyColor;
    tint(amount?: number): TinyColor;
    shade(amount?: number): TinyColor;
    desaturate(amount?: number): TinyColor;
    saturate(amount?: number): TinyColor;
    greyscale(): TinyColor;
    spin(amount: number): TinyColor;
    mix(color: ColorInput, amount?: number): TinyColor;
    analogous(results?: number, slices?: number): TinyColor[];
    complement(): TinyColor;
    monochromatic(results?: number): TinyColor[];
    splitcomplement(): TinyColor[];
    triad(): TinyColor[];
    tetrad(): TinyColor[];
    polyad(n: number): TinyColor[];
    equals(color?: ColorInput): boolean;
}
export declare function tinycolor(color?: ColorInput, opts?: Partial<TinyColorOptions>): TinyColor;
